// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: walleapi/walleapi.proto

package walleapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entry struct {
	EntryId  int64  `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	WriterId []byte `protobuf:"bytes,2,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// checksum_x_x is a rolling xxHash64 for all `data`.
	ChecksumXX uint64 `protobuf:"varint,4,opt,name=checksum_x_x,json=checksumXX,proto3" json:"checksum_x_x,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetEntryId() int64 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

func (m *Entry) GetWriterId() []byte {
	if m != nil {
		return m.WriterId
	}
	return nil
}

func (m *Entry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Entry) GetChecksumXX() uint64 {
	if m != nil {
		return m.ChecksumXX
	}
	return 0
}

type ClaimWriterRequest struct {
	StreamUri string `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	// writer_addr is a free form address that can be used to identify and
	// reach this Writer. Expected to be: <host>:<port> pair, but can be
	// custom and application specific.
	WriterAddr string `protobuf:"bytes,2,opt,name=writer_addr,json=writerAddr,proto3" json:"writer_addr,omitempty"`
	LeaseMs    int64  `protobuf:"varint,3,opt,name=lease_ms,json=leaseMs,proto3" json:"lease_ms,omitempty"`
}

func (m *ClaimWriterRequest) Reset()         { *m = ClaimWriterRequest{} }
func (m *ClaimWriterRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimWriterRequest) ProtoMessage()    {}
func (*ClaimWriterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{1}
}
func (m *ClaimWriterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimWriterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimWriterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimWriterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimWriterRequest.Merge(m, src)
}
func (m *ClaimWriterRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimWriterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimWriterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimWriterRequest proto.InternalMessageInfo

func (m *ClaimWriterRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *ClaimWriterRequest) GetWriterAddr() string {
	if m != nil {
		return m.WriterAddr
	}
	return ""
}

func (m *ClaimWriterRequest) GetLeaseMs() int64 {
	if m != nil {
		return m.LeaseMs
	}
	return 0
}

type ClaimWriterResponse struct {
	WriterId  []byte `protobuf:"bytes,1,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	TailEntry *Entry `protobuf:"bytes,2,opt,name=tail_entry,json=tailEntry,proto3" json:"tail_entry,omitempty"`
}

func (m *ClaimWriterResponse) Reset()         { *m = ClaimWriterResponse{} }
func (m *ClaimWriterResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimWriterResponse) ProtoMessage()    {}
func (*ClaimWriterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{2}
}
func (m *ClaimWriterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimWriterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimWriterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimWriterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimWriterResponse.Merge(m, src)
}
func (m *ClaimWriterResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimWriterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimWriterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimWriterResponse proto.InternalMessageInfo

func (m *ClaimWriterResponse) GetWriterId() []byte {
	if m != nil {
		return m.WriterId
	}
	return nil
}

func (m *ClaimWriterResponse) GetTailEntry() *Entry {
	if m != nil {
		return m.TailEntry
	}
	return nil
}

type WriterStatusRequest struct {
	StreamUri string `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
}

func (m *WriterStatusRequest) Reset()         { *m = WriterStatusRequest{} }
func (m *WriterStatusRequest) String() string { return proto.CompactTextString(m) }
func (*WriterStatusRequest) ProtoMessage()    {}
func (*WriterStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{3}
}
func (m *WriterStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriterStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriterStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriterStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriterStatusRequest.Merge(m, src)
}
func (m *WriterStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriterStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriterStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriterStatusRequest proto.InternalMessageInfo

func (m *WriterStatusRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

type WriterStatusResponse struct {
	WriterAddr       string `protobuf:"bytes,1,opt,name=writer_addr,json=writerAddr,proto3" json:"writer_addr,omitempty"`
	LeaseMs          int64  `protobuf:"varint,2,opt,name=lease_ms,json=leaseMs,proto3" json:"lease_ms,omitempty"`
	RemainingLeaseMs int64  `protobuf:"varint,3,opt,name=remaining_lease_ms,json=remainingLeaseMs,proto3" json:"remaining_lease_ms,omitempty"`
	StreamVersion    int64  `protobuf:"varint,4,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
}

func (m *WriterStatusResponse) Reset()         { *m = WriterStatusResponse{} }
func (m *WriterStatusResponse) String() string { return proto.CompactTextString(m) }
func (*WriterStatusResponse) ProtoMessage()    {}
func (*WriterStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{4}
}
func (m *WriterStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriterStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriterStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriterStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriterStatusResponse.Merge(m, src)
}
func (m *WriterStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriterStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriterStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriterStatusResponse proto.InternalMessageInfo

func (m *WriterStatusResponse) GetWriterAddr() string {
	if m != nil {
		return m.WriterAddr
	}
	return ""
}

func (m *WriterStatusResponse) GetLeaseMs() int64 {
	if m != nil {
		return m.LeaseMs
	}
	return 0
}

func (m *WriterStatusResponse) GetRemainingLeaseMs() int64 {
	if m != nil {
		return m.RemainingLeaseMs
	}
	return 0
}

func (m *WriterStatusResponse) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

type PutEntryRequest struct {
	StreamUri        string `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	Entry            *Entry `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	CommittedEntryId int64  `protobuf:"varint,3,opt,name=committed_entry_id,json=committedEntryId,proto3" json:"committed_entry_id,omitempty"`
	CommittedEntryXX uint64 `protobuf:"varint,4,opt,name=committed_entry_x_x,json=committedEntryXX,proto3" json:"committed_entry_x_x,omitempty"`
}

func (m *PutEntryRequest) Reset()         { *m = PutEntryRequest{} }
func (m *PutEntryRequest) String() string { return proto.CompactTextString(m) }
func (*PutEntryRequest) ProtoMessage()    {}
func (*PutEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{5}
}
func (m *PutEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEntryRequest.Merge(m, src)
}
func (m *PutEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutEntryRequest proto.InternalMessageInfo

func (m *PutEntryRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *PutEntryRequest) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *PutEntryRequest) GetCommittedEntryId() int64 {
	if m != nil {
		return m.CommittedEntryId
	}
	return 0
}

func (m *PutEntryRequest) GetCommittedEntryXX() uint64 {
	if m != nil {
		return m.CommittedEntryXX
	}
	return 0
}

type PollStreamRequest struct {
	StreamUri string `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	// poll_entry_id can be provided to wait until committed_id >= poll_entry_id.
	PollEntryId int64 `protobuf:"varint,2,opt,name=poll_entry_id,json=pollEntryId,proto3" json:"poll_entry_id,omitempty"`
}

func (m *PollStreamRequest) Reset()         { *m = PollStreamRequest{} }
func (m *PollStreamRequest) String() string { return proto.CompactTextString(m) }
func (*PollStreamRequest) ProtoMessage()    {}
func (*PollStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{6}
}
func (m *PollStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollStreamRequest.Merge(m, src)
}
func (m *PollStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollStreamRequest proto.InternalMessageInfo

func (m *PollStreamRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *PollStreamRequest) GetPollEntryId() int64 {
	if m != nil {
		return m.PollEntryId
	}
	return 0
}

type StreamEntriesRequest struct {
	StreamUri   string `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	FromEntryId int64  `protobuf:"varint,2,opt,name=from_entry_id,json=fromEntryId,proto3" json:"from_entry_id,omitempty"`
}

func (m *StreamEntriesRequest) Reset()         { *m = StreamEntriesRequest{} }
func (m *StreamEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*StreamEntriesRequest) ProtoMessage()    {}
func (*StreamEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{7}
}
func (m *StreamEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEntriesRequest.Merge(m, src)
}
func (m *StreamEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEntriesRequest proto.InternalMessageInfo

func (m *StreamEntriesRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *StreamEntriesRequest) GetFromEntryId() int64 {
	if m != nil {
		return m.FromEntryId
	}
	return 0
}

type Topology struct {
	// root_uri is only set for root topology that is created during bootstrap.
	RootUri string `protobuf:"bytes,1,opt,name=root_uri,json=rootUri,proto3" json:"root_uri,omitempty"`
	// Matches EntryId of the stream it gets written to.
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// Maps streamURI -> StreamTopology
	Streams map[string]*StreamTopology `protobuf:"bytes,3,rep,name=streams,proto3" json:"streams,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maps ServerID -> ServerInfo
	Servers map[string]*ServerInfo `protobuf:"bytes,4,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Topology) Reset()         { *m = Topology{} }
func (m *Topology) String() string { return proto.CompactTextString(m) }
func (*Topology) ProtoMessage()    {}
func (*Topology) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{8}
}
func (m *Topology) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topology.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topology.Merge(m, src)
}
func (m *Topology) XXX_Size() int {
	return m.Size()
}
func (m *Topology) XXX_DiscardUnknown() {
	xxx_messageInfo_Topology.DiscardUnknown(m)
}

var xxx_messageInfo_Topology proto.InternalMessageInfo

func (m *Topology) GetRootUri() string {
	if m != nil {
		return m.RootUri
	}
	return ""
}

func (m *Topology) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Topology) GetStreams() map[string]*StreamTopology {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *Topology) GetServers() map[string]*ServerInfo {
	if m != nil {
		return m.Servers
	}
	return nil
}

type StreamTopology struct {
	// Monotonically increasing `version` for the stream members.
	// TODO(zviad): describe topology transition and its safety.
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Current serverIds for the stream.
	ServerIds []string `protobuf:"bytes,2,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
}

func (m *StreamTopology) Reset()         { *m = StreamTopology{} }
func (m *StreamTopology) String() string { return proto.CompactTextString(m) }
func (*StreamTopology) ProtoMessage()    {}
func (*StreamTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{9}
}
func (m *StreamTopology) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTopology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTopology.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTopology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTopology.Merge(m, src)
}
func (m *StreamTopology) XXX_Size() int {
	return m.Size()
}
func (m *StreamTopology) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTopology.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTopology proto.InternalMessageInfo

func (m *StreamTopology) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StreamTopology) GetServerIds() []string {
	if m != nil {
		return m.ServerIds
	}
	return nil
}

type ServerInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{10}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b522378fad0fbf4, []int{11}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Entry)(nil), "Entry")
	proto.RegisterType((*ClaimWriterRequest)(nil), "ClaimWriterRequest")
	proto.RegisterType((*ClaimWriterResponse)(nil), "ClaimWriterResponse")
	proto.RegisterType((*WriterStatusRequest)(nil), "WriterStatusRequest")
	proto.RegisterType((*WriterStatusResponse)(nil), "WriterStatusResponse")
	proto.RegisterType((*PutEntryRequest)(nil), "PutEntryRequest")
	proto.RegisterType((*PollStreamRequest)(nil), "PollStreamRequest")
	proto.RegisterType((*StreamEntriesRequest)(nil), "StreamEntriesRequest")
	proto.RegisterType((*Topology)(nil), "Topology")
	proto.RegisterMapType((map[string]*ServerInfo)(nil), "Topology.ServersEntry")
	proto.RegisterMapType((map[string]*StreamTopology)(nil), "Topology.StreamsEntry")
	proto.RegisterType((*StreamTopology)(nil), "StreamTopology")
	proto.RegisterType((*ServerInfo)(nil), "ServerInfo")
	proto.RegisterType((*Empty)(nil), "Empty")
}

func init() { proto.RegisterFile("walleapi/walleapi.proto", fileDescriptor_3b522378fad0fbf4) }

var fileDescriptor_3b522378fad0fbf4 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x73, 0x68, 0x92, 0x49, 0x7a, 0xf8, 0x37, 0xe9, 0xff, 0xe7, 0x0f, 0x10, 0xc2, 0x4a,
	0xad, 0x22, 0x04, 0x6e, 0x15, 0xb8, 0x40, 0x95, 0x90, 0x28, 0xa8, 0x42, 0x11, 0x20, 0x55, 0x2e,
	0xb4, 0x29, 0x37, 0x96, 0x1b, 0x6f, 0xdb, 0x55, 0xed, 0x6c, 0xb0, 0xd7, 0x3d, 0xf0, 0x0e, 0x48,
	0xbc, 0x05, 0x17, 0x3c, 0x01, 0x6f, 0xc0, 0x65, 0x2f, 0xb9, 0x44, 0xed, 0x8b, 0xa0, 0x3d, 0x38,
	0x89, 0x93, 0x08, 0xe5, 0x6e, 0x67, 0x66, 0xe7, 0x9b, 0x6f, 0x66, 0x76, 0x66, 0xe1, 0xbf, 0x0b,
	0xc7, 0xf3, 0x88, 0x33, 0xa0, 0x1b, 0xf1, 0xc1, 0x1c, 0x04, 0x8c, 0x33, 0x1c, 0x41, 0x6e, 0xa7,
	0xcf, 0x83, 0x2b, 0xf4, 0x3f, 0x14, 0x88, 0x38, 0xd8, 0xd4, 0xad, 0x19, 0x4d, 0xa3, 0x95, 0xb1,
	0xf2, 0x52, 0xee, 0xb8, 0xe8, 0x0e, 0x14, 0x2f, 0x02, 0xca, 0x49, 0x20, 0x6c, 0xe9, 0xa6, 0xd1,
	0x2a, 0x5b, 0x05, 0xa5, 0xe8, 0xb8, 0x08, 0x41, 0xd6, 0x75, 0xb8, 0x53, 0xcb, 0x48, 0xbd, 0x3c,
	0xa3, 0x26, 0x94, 0x7b, 0xa7, 0xa4, 0x77, 0x16, 0x46, 0xbe, 0x7d, 0x69, 0x5f, 0xd6, 0xb2, 0x4d,
	0xa3, 0x95, 0xb5, 0x20, 0xd6, 0x75, 0xbb, 0x98, 0x01, 0x7a, 0xe5, 0x39, 0xd4, 0x3f, 0x90, 0x30,
	0x16, 0xf9, 0x14, 0x91, 0x90, 0xa3, 0x7b, 0x00, 0x21, 0x0f, 0x88, 0xe3, 0xdb, 0x51, 0x40, 0x25,
	0x8b, 0xa2, 0x55, 0x54, 0x9a, 0x0f, 0x01, 0x45, 0xf7, 0xa1, 0xa4, 0x79, 0x38, 0xae, 0x1b, 0x48,
	0x26, 0x45, 0x0b, 0x94, 0x6a, 0xdb, 0x75, 0x03, 0x91, 0x83, 0x47, 0x9c, 0x90, 0xd8, 0x7e, 0x28,
	0xf9, 0x64, 0xac, 0xbc, 0x94, 0xdf, 0x85, 0xf8, 0x10, 0x2a, 0x89, 0x80, 0xe1, 0x80, 0xf5, 0x43,
	0x92, 0x4c, 0xcd, 0x98, 0x48, 0x6d, 0x0d, 0x80, 0x3b, 0xd4, 0xb3, 0x65, 0x1d, 0x64, 0xb8, 0x52,
	0x7b, 0xc1, 0x94, 0xe5, 0xb2, 0x8a, 0xc2, 0x22, 0x8f, 0xf8, 0x29, 0x54, 0x14, 0xea, 0x1e, 0x77,
	0x78, 0x14, 0xce, 0x97, 0x0c, 0xfe, 0x66, 0x40, 0x35, 0xe9, 0xa6, 0x29, 0x4d, 0x64, 0x69, 0xfc,
	0x35, 0xcb, 0x74, 0x22, 0x4b, 0xf4, 0x08, 0x50, 0x40, 0x7c, 0x87, 0xf6, 0x69, 0xff, 0xc4, 0x9e,
	0x28, 0xc5, 0xca, 0xd0, 0xf2, 0x56, 0xdf, 0x5e, 0x83, 0x25, 0xcd, 0xf0, 0x9c, 0x04, 0x21, 0x65,
	0x7d, 0xd9, 0xa8, 0x8c, 0xb5, 0xa8, 0xb4, 0xfb, 0x4a, 0x89, 0xbf, 0x1b, 0xb0, 0xbc, 0x1b, 0x71,
	0x95, 0xf7, 0x7c, 0x9d, 0xba, 0x0b, 0xb9, 0x59, 0x45, 0x53, 0x4a, 0xc1, 0xb2, 0xc7, 0x7c, 0x9f,
	0x72, 0x4e, 0x5c, 0x7b, 0xf8, 0xe8, 0x34, 0xcb, 0xa1, 0x65, 0x47, 0xbf, 0xbe, 0xc7, 0x50, 0x99,
	0xbc, 0x3d, 0x7a, 0x53, 0x13, 0xd7, 0xbb, 0x5d, 0xbc, 0x0f, 0xff, 0xec, 0x32, 0xcf, 0xdb, 0x93,
	0x5c, 0xe6, 0xa4, 0x8b, 0x61, 0x71, 0xc0, 0x3c, 0x6f, 0xc4, 0x45, 0x95, 0xb5, 0x24, 0x94, 0x9a,
	0x06, 0x3e, 0x84, 0xaa, 0xc2, 0x14, 0x0a, 0x4a, 0xc2, 0xf9, 0xa1, 0x8f, 0x03, 0xe6, 0x4f, 0x41,
	0x0b, 0x65, 0x0c, 0xfd, 0x23, 0x0d, 0x85, 0xf7, 0x6c, 0xc0, 0x3c, 0x76, 0x22, 0xe7, 0x30, 0x60,
	0x8c, 0x8f, 0xa1, 0xe5, 0x85, 0x2c, 0xb0, 0x6a, 0x90, 0x8f, 0x1b, 0xa5, 0xfb, 0xae, 0x45, 0xb4,
	0x09, 0x79, 0x15, 0x52, 0x34, 0x3b, 0xd3, 0x2a, 0xb5, 0xff, 0x35, 0x63, 0x40, 0x53, 0xb1, 0x0e,
	0x55, 0x07, 0xe2, 0x6b, 0xd2, 0x83, 0x04, 0xc2, 0xbf, 0x96, 0x9d, 0xf2, 0x50, 0x86, 0xd8, 0x43,
	0x49, 0xf5, 0x37, 0x50, 0x1e, 0x87, 0x42, 0x2b, 0x90, 0x39, 0x23, 0x57, 0x9a, 0xa3, 0x38, 0xa2,
	0x35, 0xc8, 0x9d, 0x3b, 0x5e, 0x44, 0x74, 0xd7, 0x97, 0x75, 0xe8, 0x18, 0xd7, 0x52, 0xd6, 0xad,
	0xf4, 0x33, 0xa3, 0xfe, 0x1a, 0xca, 0xe3, 0x51, 0x66, 0x80, 0x3d, 0x48, 0x82, 0x95, 0x34, 0xab,
	0x4e, 0xff, 0x98, 0x8d, 0x01, 0xe1, 0x0e, 0x2c, 0x25, 0xa3, 0x8c, 0x57, 0xc9, 0x48, 0x56, 0x49,
	0xb4, 0x4a, 0x82, 0xd8, 0xd4, 0x15, 0xa3, 0x93, 0x91, 0xad, 0x52, 0xb0, 0x6e, 0x88, 0xd7, 0x01,
	0x46, 0x31, 0x04, 0x8c, 0x98, 0x3f, 0x12, 0x86, 0x71, 0x1b, 0xb4, 0x88, 0xf3, 0x90, 0xdb, 0xf1,
	0x07, 0xfc, 0xaa, 0xfd, 0x25, 0x0d, 0x85, 0x03, 0xb1, 0x4e, 0xb7, 0x07, 0x14, 0x6d, 0x41, 0x69,
	0x6c, 0xc1, 0xa0, 0x8a, 0x39, 0xbd, 0xdf, 0xea, 0x55, 0x73, 0xc6, 0x0e, 0xc2, 0x29, 0xf4, 0x1c,
	0xca, 0xe3, 0xab, 0x00, 0x55, 0xcd, 0x19, 0x0b, 0xa5, 0xbe, 0x6a, 0xce, 0xda, 0x17, 0x38, 0x85,
	0xd6, 0xa1, 0x10, 0xcf, 0x27, 0x5a, 0x31, 0x27, 0x46, 0xb5, 0xbe, 0x60, 0x4a, 0xb6, 0x38, 0x85,
	0x1e, 0x02, 0x8c, 0x46, 0x03, 0x21, 0x73, 0x6a, 0x4e, 0xea, 0x7a, 0x50, 0x71, 0x0a, 0xb5, 0x61,
	0x31, 0xf1, 0xdc, 0xd1, 0xaa, 0x39, 0xeb, 0xf9, 0x8f, 0x3c, 0x36, 0x8d, 0x97, 0x2f, 0x7e, 0xde,
	0x34, 0x8c, 0xeb, 0x9b, 0x86, 0xf1, 0xfb, 0xa6, 0x61, 0x7c, 0xbd, 0x6d, 0xa4, 0xae, 0x6f, 0x1b,
	0xa9, 0x5f, 0xb7, 0x8d, 0xd4, 0xc7, 0xf5, 0x13, 0xca, 0x4f, 0xa3, 0x23, 0xb3, 0xc7, 0xfc, 0x8d,
	0xcf, 0xe7, 0xd4, 0x71, 0x7d, 0xf5, 0x0f, 0x6d, 0xc8, 0x4f, 0x68, 0xf8, 0x27, 0x1d, 0x2d, 0x48,
	0xf9, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x43, 0x60, 0x64, 0xaf, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalleApiClient is the client API for WalleApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalleApiClient interface {
	ClaimWriter(ctx context.Context, in *ClaimWriterRequest, opts ...grpc.CallOption) (*ClaimWriterResponse, error)
	WriterStatus(ctx context.Context, in *WriterStatusRequest, opts ...grpc.CallOption) (*WriterStatusResponse, error)
	PutEntry(ctx context.Context, in *PutEntryRequest, opts ...grpc.CallOption) (*Empty, error)
	// PollStream polls stream for last committed entry. This rpc can be used as
	// a long poll to wait for changes on the stream. If no changes happen within
	// deadline, will exit early and return OutOfRange error instead of timing out
	// and hitting DeadlineExceeded error. This is to make it easy to distinguish
	// between real timeout errors and just long poll expiring.
	PollStream(ctx context.Context, in *PollStreamRequest, opts ...grpc.CallOption) (*Entry, error)
	// StreamEntries streams committed entries from a given starting point. StreamEntries
	// might exit early as long as it returns at least one successful entry. Note that
	// StreamEntries call will block until deadline, if there are no new committed
	// entries. Thus it can be used as a way to do long poll and stream latest entries from
	// a stream.
	// TODO(zviad): This api isn't final. Most likely will need various changes.
	StreamEntries(ctx context.Context, in *StreamEntriesRequest, opts ...grpc.CallOption) (WalleApi_StreamEntriesClient, error)
}

type walleApiClient struct {
	cc *grpc.ClientConn
}

func NewWalleApiClient(cc *grpc.ClientConn) WalleApiClient {
	return &walleApiClient{cc}
}

func (c *walleApiClient) ClaimWriter(ctx context.Context, in *ClaimWriterRequest, opts ...grpc.CallOption) (*ClaimWriterResponse, error) {
	out := new(ClaimWriterResponse)
	err := c.cc.Invoke(ctx, "/WalleApi/ClaimWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleApiClient) WriterStatus(ctx context.Context, in *WriterStatusRequest, opts ...grpc.CallOption) (*WriterStatusResponse, error) {
	out := new(WriterStatusResponse)
	err := c.cc.Invoke(ctx, "/WalleApi/WriterStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleApiClient) PutEntry(ctx context.Context, in *PutEntryRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/WalleApi/PutEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleApiClient) PollStream(ctx context.Context, in *PollStreamRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/WalleApi/PollStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleApiClient) StreamEntries(ctx context.Context, in *StreamEntriesRequest, opts ...grpc.CallOption) (WalleApi_StreamEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WalleApi_serviceDesc.Streams[0], "/WalleApi/StreamEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &walleApiStreamEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalleApi_StreamEntriesClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type walleApiStreamEntriesClient struct {
	grpc.ClientStream
}

func (x *walleApiStreamEntriesClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalleApiServer is the server API for WalleApi service.
type WalleApiServer interface {
	ClaimWriter(context.Context, *ClaimWriterRequest) (*ClaimWriterResponse, error)
	WriterStatus(context.Context, *WriterStatusRequest) (*WriterStatusResponse, error)
	PutEntry(context.Context, *PutEntryRequest) (*Empty, error)
	// PollStream polls stream for last committed entry. This rpc can be used as
	// a long poll to wait for changes on the stream. If no changes happen within
	// deadline, will exit early and return OutOfRange error instead of timing out
	// and hitting DeadlineExceeded error. This is to make it easy to distinguish
	// between real timeout errors and just long poll expiring.
	PollStream(context.Context, *PollStreamRequest) (*Entry, error)
	// StreamEntries streams committed entries from a given starting point. StreamEntries
	// might exit early as long as it returns at least one successful entry. Note that
	// StreamEntries call will block until deadline, if there are no new committed
	// entries. Thus it can be used as a way to do long poll and stream latest entries from
	// a stream.
	// TODO(zviad): This api isn't final. Most likely will need various changes.
	StreamEntries(*StreamEntriesRequest, WalleApi_StreamEntriesServer) error
}

// UnimplementedWalleApiServer can be embedded to have forward compatible implementations.
type UnimplementedWalleApiServer struct {
}

func (*UnimplementedWalleApiServer) ClaimWriter(ctx context.Context, req *ClaimWriterRequest) (*ClaimWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimWriter not implemented")
}
func (*UnimplementedWalleApiServer) WriterStatus(ctx context.Context, req *WriterStatusRequest) (*WriterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriterStatus not implemented")
}
func (*UnimplementedWalleApiServer) PutEntry(ctx context.Context, req *PutEntryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEntry not implemented")
}
func (*UnimplementedWalleApiServer) PollStream(ctx context.Context, req *PollStreamRequest) (*Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollStream not implemented")
}
func (*UnimplementedWalleApiServer) StreamEntries(req *StreamEntriesRequest, srv WalleApi_StreamEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntries not implemented")
}

func RegisterWalleApiServer(s *grpc.Server, srv WalleApiServer) {
	s.RegisterService(&_WalleApi_serviceDesc, srv)
}

func _WalleApi_ClaimWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleApiServer).ClaimWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleApi/ClaimWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleApiServer).ClaimWriter(ctx, req.(*ClaimWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleApi_WriterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleApiServer).WriterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleApi/WriterStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleApiServer).WriterStatus(ctx, req.(*WriterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleApi_PutEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleApiServer).PutEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleApi/PutEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleApiServer).PutEntry(ctx, req.(*PutEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleApi_PollStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleApiServer).PollStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleApi/PollStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleApiServer).PollStream(ctx, req.(*PollStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleApi_StreamEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalleApiServer).StreamEntries(m, &walleApiStreamEntriesServer{stream})
}

type WalleApi_StreamEntriesServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type walleApiStreamEntriesServer struct {
	grpc.ServerStream
}

func (x *walleApiStreamEntriesServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

var _WalleApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WalleApi",
	HandlerType: (*WalleApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimWriter",
			Handler:    _WalleApi_ClaimWriter_Handler,
		},
		{
			MethodName: "WriterStatus",
			Handler:    _WalleApi_WriterStatus_Handler,
		},
		{
			MethodName: "PutEntry",
			Handler:    _WalleApi_PutEntry_Handler,
		},
		{
			MethodName: "PollStream",
			Handler:    _WalleApi_PollStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEntries",
			Handler:       _WalleApi_StreamEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "walleapi/walleapi.proto",
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChecksumXX != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.ChecksumXX))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WriterId) > 0 {
		i -= len(m.WriterId)
		copy(dAtA[i:], m.WriterId)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.WriterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.EntryId != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.EntryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimWriterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimWriterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimWriterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeaseMs != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.LeaseMs))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WriterAddr) > 0 {
		i -= len(m.WriterAddr)
		copy(dAtA[i:], m.WriterAddr)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.WriterAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimWriterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimWriterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimWriterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TailEntry != nil {
		{
			size, err := m.TailEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWalleapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WriterId) > 0 {
		i -= len(m.WriterId)
		copy(dAtA[i:], m.WriterId)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.WriterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriterStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriterStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriterStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriterStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriterStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriterStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamVersion != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.StreamVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.RemainingLeaseMs != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.RemainingLeaseMs))
		i--
		dAtA[i] = 0x18
	}
	if m.LeaseMs != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.LeaseMs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.WriterAddr) > 0 {
		i -= len(m.WriterAddr)
		copy(dAtA[i:], m.WriterAddr)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.WriterAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PutEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommittedEntryXX != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.CommittedEntryXX))
		i--
		dAtA[i] = 0x20
	}
	if m.CommittedEntryId != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.CommittedEntryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWalleapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PollEntryId != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.PollEntryId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromEntryId != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.FromEntryId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Topology) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topology) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topology) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for k := range m.Servers {
			v := m.Servers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWalleapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWalleapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWalleapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Streams) > 0 {
		for k := range m.Streams {
			v := m.Streams[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWalleapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWalleapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWalleapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Version != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RootUri) > 0 {
		i -= len(m.RootUri)
		copy(dAtA[i:], m.RootUri)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.RootUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTopology) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTopology) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamTopology) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerIds) > 0 {
		for iNdEx := len(m.ServerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServerIds[iNdEx])
			copy(dAtA[i:], m.ServerIds[iNdEx])
			i = encodeVarintWalleapi(dAtA, i, uint64(len(m.ServerIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintWalleapi(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWalleapi(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintWalleapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovWalleapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryId != 0 {
		n += 1 + sovWalleapi(uint64(m.EntryId))
	}
	l = len(m.WriterId)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.ChecksumXX != 0 {
		n += 1 + sovWalleapi(uint64(m.ChecksumXX))
	}
	return n
}

func (m *ClaimWriterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	l = len(m.WriterAddr)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.LeaseMs != 0 {
		n += 1 + sovWalleapi(uint64(m.LeaseMs))
	}
	return n
}

func (m *ClaimWriterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WriterId)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.TailEntry != nil {
		l = m.TailEntry.Size()
		n += 1 + l + sovWalleapi(uint64(l))
	}
	return n
}

func (m *WriterStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	return n
}

func (m *WriterStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WriterAddr)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.LeaseMs != 0 {
		n += 1 + sovWalleapi(uint64(m.LeaseMs))
	}
	if m.RemainingLeaseMs != 0 {
		n += 1 + sovWalleapi(uint64(m.RemainingLeaseMs))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalleapi(uint64(m.StreamVersion))
	}
	return n
}

func (m *PutEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.CommittedEntryId != 0 {
		n += 1 + sovWalleapi(uint64(m.CommittedEntryId))
	}
	if m.CommittedEntryXX != 0 {
		n += 1 + sovWalleapi(uint64(m.CommittedEntryXX))
	}
	return n
}

func (m *PollStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.PollEntryId != 0 {
		n += 1 + sovWalleapi(uint64(m.PollEntryId))
	}
	return n
}

func (m *StreamEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.FromEntryId != 0 {
		n += 1 + sovWalleapi(uint64(m.FromEntryId))
	}
	return n
}

func (m *Topology) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RootUri)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovWalleapi(uint64(m.Version))
	}
	if len(m.Streams) > 0 {
		for k, v := range m.Streams {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWalleapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWalleapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWalleapi(uint64(mapEntrySize))
		}
	}
	if len(m.Servers) > 0 {
		for k, v := range m.Servers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWalleapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWalleapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWalleapi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *StreamTopology) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWalleapi(uint64(m.Version))
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			l = len(s)
			n += 1 + l + sovWalleapi(uint64(l))
		}
	}
	return n
}

func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWalleapi(uint64(l))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovWalleapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWalleapi(x uint64) (n int) {
	return sovWalleapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			m.EntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterId = append(m.WriterId[:0], dAtA[iNdEx:postIndex]...)
			if m.WriterId == nil {
				m.WriterId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumXX", wireType)
			}
			m.ChecksumXX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChecksumXX |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimWriterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimWriterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimWriterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMs", wireType)
			}
			m.LeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimWriterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimWriterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimWriterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterId = append(m.WriterId[:0], dAtA[iNdEx:postIndex]...)
			if m.WriterId == nil {
				m.WriterId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TailEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TailEntry == nil {
				m.TailEntry = &Entry{}
			}
			if err := m.TailEntry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriterStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriterStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriterStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriterStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriterStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriterStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMs", wireType)
			}
			m.LeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingLeaseMs", wireType)
			}
			m.RemainingLeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingLeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryId", wireType)
			}
			m.CommittedEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryXX", wireType)
			}
			m.CommittedEntryXX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedEntryXX |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollEntryId", wireType)
			}
			m.PollEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromEntryId", wireType)
			}
			m.FromEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topology) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topology: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topology: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Streams == nil {
				m.Streams = make(map[string]*StreamTopology)
			}
			var mapkey string
			var mapvalue *StreamTopology
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWalleapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWalleapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWalleapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWalleapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWalleapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWalleapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWalleapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StreamTopology{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWalleapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWalleapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Streams[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servers == nil {
				m.Servers = make(map[string]*ServerInfo)
			}
			var mapkey string
			var mapvalue *ServerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWalleapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWalleapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWalleapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWalleapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWalleapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWalleapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWalleapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ServerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWalleapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWalleapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Servers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTopology) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTopology: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTopology: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIds = append(m.ServerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWalleapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWalleapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWalleapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalleapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWalleapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWalleapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWalleapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWalleapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWalleapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWalleapi = fmt.Errorf("proto: unexpected end of group")
)

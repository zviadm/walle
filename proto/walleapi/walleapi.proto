syntax = "proto3";
option go_package = "github.com/zviadm/walle/proto/walleapi";

import "gogo.proto";

service WalleApi {
	rpc ClaimWriter(ClaimWriterRequest) returns (ClaimWriterResponse) {}
	rpc WriterStatus(WriterStatusRequest) returns (WriterStatusResponse) {}
	rpc PutEntry(PutEntryRequest) returns (Empty) {}

	// PollStream polls stream for last committed entry. This rpc can be used as
	// a long poll to wait for changes on the stream. If no changes happen within
	// deadline, will exit early and return OutOfRange error instead of timing out
	// and hitting DeadlineExceeded error. This is to make it easy to distinguish
	// between real timeout errors and just long poll expiring.
	rpc PollStream(PollStreamRequest) returns (Entry) {}

	// StreamEntries streams committed entries from a given starting point. StreamEntries
	// might exit early as long as it returns at least one successful entry. Note that
	// StreamEntries call will block until deadline, if there are no new committed
	// entries. Thus it can be used as a way to do long poll and stream latest entries from
	// a stream.
	// TODO(zviad): This api isn't final. Most likely will need various changes.
	rpc StreamEntries(StreamEntriesRequest) returns (stream Entry) {}
}

message WriterId {
	uint64 ts = 1;
	uint64 id = 2;
}

message Entry {
	int64 entry_id = 1;
	WriterId writer_id = 2 [(gogoproto.nullable) = false];
	// checksum_x_x is a rolling xxHash64 for all `data`.
	uint64 checksum_x_x = 3;
	bytes data = 4;
}

message ClaimWriterRequest {
	string stream_uri = 1;
	// writer_addr is a free form address that can be used to identify and
	// reach this Writer. Expected to be: <host>:<port> pair, but can be
	// custom and application specific.
	string writer_addr = 2;
	int64 lease_ms = 3;
}
message ClaimWriterResponse {
	WriterId writer_id = 1 [(gogoproto.nullable) = false];
	Entry tail_entry = 2;
}

message WriterStatusRequest {
	string stream_uri = 1;
}
message WriterStatusResponse {
	string writer_addr = 1;
	int64 lease_ms = 2;
	int64 remaining_lease_ms = 3;
	int64 stream_version = 4;
}

message PutEntryRequest {
	string stream_uri = 1;
	Entry entry = 2;
	int64 committed_entry_id = 3;
	uint64 committed_entry_x_x = 4;
}

message PollStreamRequest {
	string stream_uri = 1;
	// poll_entry_id can be provided to wait until committed_id >= poll_entry_id.
	int64 poll_entry_id = 2;
}

message StreamEntriesRequest {
	string stream_uri = 1;
	int64 from_entry_id = 2; // can be `-1` to stream last committed entry.
}

message Topology {
	// root_uri is only set for root topology that is created during bootstrap.
	string root_uri = 1;
	// Matches EntryId of the stream it gets written to.
	int64 version = 2;
	// Maps streamURI -> StreamTopology
	map<string, StreamTopology> streams = 3;
	// Maps ServerID -> ServerInfo
	map<string, ServerInfo> servers = 4;
}

message StreamTopology {
	// Monotonically increasing `version` for the stream members.
	// TODO(zviad): describe topology transition and its safety.
	int64 version = 1;
	// Current serverIds for the stream.
	repeated string server_ids = 2;
}

message ServerInfo {
	string address = 1;
}

message Empty {
}
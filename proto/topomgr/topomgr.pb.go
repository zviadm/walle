// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topomgr/topomgr.proto

package topomgr

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	walleapi "github.com/zviadm/walle/proto/walleapi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FetchTopologyRequest struct {
	ClusterUri string `protobuf:"bytes,1,opt,name=cluster_uri,json=clusterUri,proto3" json:"cluster_uri,omitempty"`
}

func (m *FetchTopologyRequest) Reset()         { *m = FetchTopologyRequest{} }
func (m *FetchTopologyRequest) String() string { return proto.CompactTextString(m) }
func (*FetchTopologyRequest) ProtoMessage()    {}
func (*FetchTopologyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{0}
}
func (m *FetchTopologyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTopologyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTopologyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTopologyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTopologyRequest.Merge(m, src)
}
func (m *FetchTopologyRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchTopologyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTopologyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTopologyRequest proto.InternalMessageInfo

func (m *FetchTopologyRequest) GetClusterUri() string {
	if m != nil {
		return m.ClusterUri
	}
	return ""
}

type RegisterServerRequest struct {
	ClusterUri string               `protobuf:"bytes,1,opt,name=cluster_uri,json=clusterUri,proto3" json:"cluster_uri,omitempty"`
	ServerId   string               `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerInfo *walleapi.ServerInfo `protobuf:"bytes,3,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
}

func (m *RegisterServerRequest) Reset()         { *m = RegisterServerRequest{} }
func (m *RegisterServerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterServerRequest) ProtoMessage()    {}
func (*RegisterServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{1}
}
func (m *RegisterServerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterServerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterServerRequest.Merge(m, src)
}
func (m *RegisterServerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterServerRequest proto.InternalMessageInfo

func (m *RegisterServerRequest) GetClusterUri() string {
	if m != nil {
		return m.ClusterUri
	}
	return ""
}

func (m *RegisterServerRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *RegisterServerRequest) GetServerInfo() *walleapi.ServerInfo {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

type CrUpdateStreamRequest struct {
	ClusterUri string   `protobuf:"bytes,1,opt,name=cluster_uri,json=clusterUri,proto3" json:"cluster_uri,omitempty"`
	StreamUri  string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	ServerIds  []string `protobuf:"bytes,3,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
}

func (m *CrUpdateStreamRequest) Reset()         { *m = CrUpdateStreamRequest{} }
func (m *CrUpdateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CrUpdateStreamRequest) ProtoMessage()    {}
func (*CrUpdateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{2}
}
func (m *CrUpdateStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrUpdateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrUpdateStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrUpdateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrUpdateStreamRequest.Merge(m, src)
}
func (m *CrUpdateStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *CrUpdateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrUpdateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrUpdateStreamRequest proto.InternalMessageInfo

func (m *CrUpdateStreamRequest) GetClusterUri() string {
	if m != nil {
		return m.ClusterUri
	}
	return ""
}

func (m *CrUpdateStreamRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *CrUpdateStreamRequest) GetServerIds() []string {
	if m != nil {
		return m.ServerIds
	}
	return nil
}

type TrimStreamRequest struct {
	ClusterUri string `protobuf:"bytes,1,opt,name=cluster_uri,json=clusterUri,proto3" json:"cluster_uri,omitempty"`
	StreamUri  string `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	EntryId    int64  `protobuf:"varint,3,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (m *TrimStreamRequest) Reset()         { *m = TrimStreamRequest{} }
func (m *TrimStreamRequest) String() string { return proto.CompactTextString(m) }
func (*TrimStreamRequest) ProtoMessage()    {}
func (*TrimStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{3}
}
func (m *TrimStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimStreamRequest.Merge(m, src)
}
func (m *TrimStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *TrimStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrimStreamRequest proto.InternalMessageInfo

func (m *TrimStreamRequest) GetClusterUri() string {
	if m != nil {
		return m.ClusterUri
	}
	return ""
}

func (m *TrimStreamRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *TrimStreamRequest) GetEntryId() int64 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

func init() {
	proto.RegisterType((*FetchTopologyRequest)(nil), "FetchTopologyRequest")
	proto.RegisterType((*RegisterServerRequest)(nil), "RegisterServerRequest")
	proto.RegisterType((*CrUpdateStreamRequest)(nil), "CrUpdateStreamRequest")
	proto.RegisterType((*TrimStreamRequest)(nil), "TrimStreamRequest")
}

func init() { proto.RegisterFile("topomgr/topomgr.proto", fileDescriptor_4b9802c6f2bebbad) }

var fileDescriptor_4b9802c6f2bebbad = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x41, 0x8b, 0xda, 0x40,
	0x18, 0xcd, 0x34, 0x60, 0xcd, 0x17, 0x5a, 0xe8, 0xd0, 0xd8, 0xd4, 0xd2, 0x54, 0x02, 0x05, 0x29,
	0x65, 0x02, 0x7a, 0xe8, 0xb1, 0xd0, 0xd2, 0x82, 0x87, 0x5e, 0xa2, 0x5e, 0x7a, 0x91, 0x68, 0xc6,
	0x38, 0x90, 0x64, 0xd2, 0xc9, 0xc4, 0xe2, 0x5e, 0xf7, 0x0f, 0xec, 0xcf, 0xda, 0xa3, 0xa7, 0x65,
	0x8f, 0x8b, 0xfe, 0x91, 0x25, 0x93, 0x64, 0x5d, 0x59, 0x0f, 0x1e, 0xf6, 0x94, 0xf9, 0xde, 0xcb,
	0x63, 0xde, 0xbc, 0xf7, 0x81, 0x25, 0x79, 0xc6, 0x93, 0x48, 0x78, 0xf5, 0x97, 0x64, 0x82, 0x4b,
	0xde, 0x7d, 0xf7, 0x3f, 0x88, 0x63, 0x1a, 0x64, 0xcc, 0x6b, 0x0e, 0x15, 0xe1, 0x7e, 0x83, 0xb7,
	0xbf, 0xa9, 0x5c, 0xac, 0x26, 0x3c, 0xe3, 0x31, 0x8f, 0x36, 0x3e, 0xfd, 0x57, 0xd0, 0x5c, 0xe2,
	0x4f, 0x60, 0x2e, 0xe2, 0x22, 0x97, 0x54, 0xcc, 0x0a, 0xc1, 0x6c, 0xd4, 0x43, 0x7d, 0xc3, 0x87,
	0x1a, 0x9a, 0x0a, 0xe6, 0x5e, 0x22, 0xb0, 0x7c, 0x1a, 0xb1, 0x72, 0x1e, 0x53, 0xb1, 0xa6, 0xe2,
	0x5c, 0x29, 0xfe, 0x00, 0x46, 0xae, 0x14, 0x33, 0x16, 0xda, 0x2f, 0x14, 0xdd, 0xae, 0x80, 0x51,
	0x88, 0xbf, 0x82, 0xd9, 0x90, 0xe9, 0x92, 0xdb, 0x7a, 0x0f, 0xf5, 0xcd, 0x81, 0x49, 0xaa, 0x2b,
	0x46, 0xe9, 0x92, 0xfb, 0x90, 0x3f, 0x9c, 0xdd, 0x35, 0x58, 0x3f, 0xc5, 0x34, 0x0b, 0x03, 0x49,
	0xc7, 0x52, 0xd0, 0x20, 0x39, 0xdb, 0xc4, 0x47, 0x80, 0x5c, 0x29, 0x14, 0x5f, 0xb9, 0x30, 0x2a,
	0xa4, 0xa1, 0x1b, 0x8f, 0xb9, 0xad, 0xf7, 0x74, 0x45, 0xd7, 0x26, 0x73, 0x37, 0x85, 0x37, 0x13,
	0xc1, 0x92, 0xe7, 0xbd, 0xf3, 0x3d, 0xb4, 0x69, 0x2a, 0xc5, 0xa6, 0x8c, 0xa5, 0x7c, 0xb7, 0xee,
	0xbf, 0x54, 0xf3, 0x28, 0x1c, 0xdc, 0x20, 0x30, 0xcb, 0x8a, 0xfe, 0x04, 0x69, 0x10, 0x51, 0x81,
	0x87, 0xf0, 0xea, 0xa8, 0x36, 0x6c, 0x91, 0x53, 0x35, 0x76, 0x0d, 0xd2, 0x20, 0xae, 0x86, 0x07,
	0xf0, 0xfa, 0xb8, 0x31, 0xdc, 0x21, 0x27, 0x2b, 0xec, 0xb6, 0xc8, 0xaf, 0x24, 0x93, 0xb5, 0xe6,
	0x38, 0x60, 0xdc, 0x21, 0x27, 0x13, 0x7f, 0xa4, 0xf9, 0x02, 0x70, 0x08, 0x07, 0x63, 0xf2, 0x24,
	0xa9, 0xc3, 0xbf, 0x3f, 0xbe, 0x5f, 0xef, 0x1c, 0xb4, 0xdd, 0x39, 0xe8, 0x6e, 0xe7, 0xa0, 0xab,
	0xbd, 0xa3, 0x6d, 0xf7, 0x8e, 0x76, 0xbb, 0x77, 0xb4, 0xbf, 0x9f, 0x23, 0x26, 0x57, 0xc5, 0x9c,
	0x2c, 0x78, 0xe2, 0x5d, 0xac, 0x59, 0x10, 0x26, 0xd5, 0xee, 0x7a, 0x6a, 0x71, 0x9b, 0xfd, 0x9e,
	0xb7, 0xd4, 0x38, 0xbc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x21, 0x6d, 0xcd, 0xf9, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopoManagerClient is the client API for TopoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopoManagerClient interface {
	// FetchTopology returns full topology for a given cluster_uri.
	FetchTopology(ctx context.Context, in *FetchTopologyRequest, opts ...grpc.CallOption) (*walleapi.Topology, error)
	// RegisterServer call registers WALLE server node with a cluster. It is expected
	// to be called by the WALLE server process itself.
	RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*walleapi.Empty, error)
	// CrUpdateStream creates new stream or updates members of an existing stream to new members.
	CrUpdateStream(ctx context.Context, in *CrUpdateStreamRequest, opts ...grpc.CallOption) (*walleapi.Empty, error)
	// TrimStream schedules stream to be truncated up to given EntryId. Trimming is
	// an asynchronous operation.
	TrimStream(ctx context.Context, in *TrimStreamRequest, opts ...grpc.CallOption) (*walleapi.Empty, error)
}

type topoManagerClient struct {
	cc *grpc.ClientConn
}

func NewTopoManagerClient(cc *grpc.ClientConn) TopoManagerClient {
	return &topoManagerClient{cc}
}

func (c *topoManagerClient) FetchTopology(ctx context.Context, in *FetchTopologyRequest, opts ...grpc.CallOption) (*walleapi.Topology, error) {
	out := new(walleapi.Topology)
	err := c.cc.Invoke(ctx, "/TopoManager/FetchTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*walleapi.Empty, error) {
	out := new(walleapi.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) CrUpdateStream(ctx context.Context, in *CrUpdateStreamRequest, opts ...grpc.CallOption) (*walleapi.Empty, error) {
	out := new(walleapi.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/CrUpdateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) TrimStream(ctx context.Context, in *TrimStreamRequest, opts ...grpc.CallOption) (*walleapi.Empty, error) {
	out := new(walleapi.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/TrimStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopoManagerServer is the server API for TopoManager service.
type TopoManagerServer interface {
	// FetchTopology returns full topology for a given cluster_uri.
	FetchTopology(context.Context, *FetchTopologyRequest) (*walleapi.Topology, error)
	// RegisterServer call registers WALLE server node with a cluster. It is expected
	// to be called by the WALLE server process itself.
	RegisterServer(context.Context, *RegisterServerRequest) (*walleapi.Empty, error)
	// CrUpdateStream creates new stream or updates members of an existing stream to new members.
	CrUpdateStream(context.Context, *CrUpdateStreamRequest) (*walleapi.Empty, error)
	// TrimStream schedules stream to be truncated up to given EntryId. Trimming is
	// an asynchronous operation.
	TrimStream(context.Context, *TrimStreamRequest) (*walleapi.Empty, error)
}

// UnimplementedTopoManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTopoManagerServer struct {
}

func (*UnimplementedTopoManagerServer) FetchTopology(ctx context.Context, req *FetchTopologyRequest) (*walleapi.Topology, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTopology not implemented")
}
func (*UnimplementedTopoManagerServer) RegisterServer(ctx context.Context, req *RegisterServerRequest) (*walleapi.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (*UnimplementedTopoManagerServer) CrUpdateStream(ctx context.Context, req *CrUpdateStreamRequest) (*walleapi.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrUpdateStream not implemented")
}
func (*UnimplementedTopoManagerServer) TrimStream(ctx context.Context, req *TrimStreamRequest) (*walleapi.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrimStream not implemented")
}

func RegisterTopoManagerServer(s *grpc.Server, srv TopoManagerServer) {
	s.RegisterService(&_TopoManager_serviceDesc, srv)
}

func _TopoManager_FetchTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).FetchTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/FetchTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).FetchTopology(ctx, req.(*FetchTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).RegisterServer(ctx, req.(*RegisterServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_CrUpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrUpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).CrUpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/CrUpdateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).CrUpdateStream(ctx, req.(*CrUpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_TrimStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrimStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).TrimStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/TrimStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).TrimStream(ctx, req.(*TrimStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopoManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TopoManager",
	HandlerType: (*TopoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTopology",
			Handler:    _TopoManager_FetchTopology_Handler,
		},
		{
			MethodName: "RegisterServer",
			Handler:    _TopoManager_RegisterServer_Handler,
		},
		{
			MethodName: "CrUpdateStream",
			Handler:    _TopoManager_CrUpdateStream_Handler,
		},
		{
			MethodName: "TrimStream",
			Handler:    _TopoManager_TrimStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topomgr/topomgr.proto",
}

func (m *FetchTopologyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTopologyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTopologyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterUri) > 0 {
		i -= len(m.ClusterUri)
		copy(dAtA[i:], m.ClusterUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ClusterUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterServerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterServerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerInfo != nil {
		{
			size, err := m.ServerInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTopomgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterUri) > 0 {
		i -= len(m.ClusterUri)
		copy(dAtA[i:], m.ClusterUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ClusterUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrUpdateStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrUpdateStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrUpdateStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerIds) > 0 {
		for iNdEx := len(m.ServerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServerIds[iNdEx])
			copy(dAtA[i:], m.ServerIds[iNdEx])
			i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ServerIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterUri) > 0 {
		i -= len(m.ClusterUri)
		copy(dAtA[i:], m.ClusterUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ClusterUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EntryId != 0 {
		i = encodeVarintTopomgr(dAtA, i, uint64(m.EntryId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StreamUri) > 0 {
		i -= len(m.StreamUri)
		copy(dAtA[i:], m.StreamUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.StreamUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterUri) > 0 {
		i -= len(m.ClusterUri)
		copy(dAtA[i:], m.ClusterUri)
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ClusterUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTopomgr(dAtA []byte, offset int, v uint64) int {
	offset -= sovTopomgr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FetchTopologyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	return n
}

func (m *RegisterServerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.ServerInfo != nil {
		l = m.ServerInfo.Size()
		n += 1 + l + sovTopomgr(uint64(l))
	}
	return n
}

func (m *CrUpdateStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			l = len(s)
			n += 1 + l + sovTopomgr(uint64(l))
		}
	}
	return n
}

func (m *TrimStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.EntryId != 0 {
		n += 1 + sovTopomgr(uint64(m.EntryId))
	}
	return n
}

func sovTopomgr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTopomgr(x uint64) (n int) {
	return sovTopomgr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchTopologyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTopologyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTopologyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerInfo == nil {
				m.ServerInfo = &walleapi.ServerInfo{}
			}
			if err := m.ServerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrUpdateStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrUpdateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrUpdateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIds = append(m.ServerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			m.EntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopomgr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopomgr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTopomgr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTopomgr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTopomgr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopomgr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTopomgr = fmt.Errorf("proto: unexpected end of group")
)

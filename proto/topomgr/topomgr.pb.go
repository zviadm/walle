// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: topomgr/topomgr.proto

package topomgr

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	walleapi "github.com/zviadm/walle/proto/walleapi"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchTopologyRequest struct {
	TopologyUri          string   `protobuf:"bytes,1,opt,name=topology_uri,json=topologyUri,proto3" json:"topology_uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchTopologyRequest) Reset()         { *m = FetchTopologyRequest{} }
func (m *FetchTopologyRequest) String() string { return proto.CompactTextString(m) }
func (*FetchTopologyRequest) ProtoMessage()    {}
func (*FetchTopologyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{0}
}
func (m *FetchTopologyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTopologyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTopologyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTopologyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTopologyRequest.Merge(m, src)
}
func (m *FetchTopologyRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchTopologyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTopologyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTopologyRequest proto.InternalMessageInfo

func (m *FetchTopologyRequest) GetTopologyUri() string {
	if m != nil {
		return m.TopologyUri
	}
	return ""
}

type UpdateTopologyRequest struct {
	TopologyUri          string             `protobuf:"bytes,1,opt,name=topology_uri,json=topologyUri,proto3" json:"topology_uri,omitempty"`
	Topology             *walleapi.Topology `protobuf:"bytes,2,opt,name=topology,proto3" json:"topology,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateTopologyRequest) Reset()         { *m = UpdateTopologyRequest{} }
func (m *UpdateTopologyRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTopologyRequest) ProtoMessage()    {}
func (*UpdateTopologyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{1}
}
func (m *UpdateTopologyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTopologyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTopologyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTopologyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTopologyRequest.Merge(m, src)
}
func (m *UpdateTopologyRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTopologyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTopologyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTopologyRequest proto.InternalMessageInfo

func (m *UpdateTopologyRequest) GetTopologyUri() string {
	if m != nil {
		return m.TopologyUri
	}
	return ""
}

func (m *UpdateTopologyRequest) GetTopology() *walleapi.Topology {
	if m != nil {
		return m.Topology
	}
	return nil
}

type UpdateServerInfoRequest struct {
	TopologyUri          string               `protobuf:"bytes,1,opt,name=topology_uri,json=topologyUri,proto3" json:"topology_uri,omitempty"`
	ServerId             string               `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerInfo           *walleapi.ServerInfo `protobuf:"bytes,3,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateServerInfoRequest) Reset()         { *m = UpdateServerInfoRequest{} }
func (m *UpdateServerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateServerInfoRequest) ProtoMessage()    {}
func (*UpdateServerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{2}
}
func (m *UpdateServerInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServerInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServerInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServerInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServerInfoRequest.Merge(m, src)
}
func (m *UpdateServerInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServerInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServerInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServerInfoRequest proto.InternalMessageInfo

func (m *UpdateServerInfoRequest) GetTopologyUri() string {
	if m != nil {
		return m.TopologyUri
	}
	return ""
}

func (m *UpdateServerInfoRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *UpdateServerInfoRequest) GetServerInfo() *walleapi.ServerInfo {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

type UpdateServerIdsRequest struct {
	TopologyUri          string   `protobuf:"bytes,1,opt,name=topology_uri,json=topologyUri,proto3" json:"topology_uri,omitempty"`
	StreamUri            string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	ServerIds            []string `protobuf:"bytes,3,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateServerIdsRequest) Reset()         { *m = UpdateServerIdsRequest{} }
func (m *UpdateServerIdsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateServerIdsRequest) ProtoMessage()    {}
func (*UpdateServerIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b9802c6f2bebbad, []int{3}
}
func (m *UpdateServerIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateServerIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateServerIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateServerIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServerIdsRequest.Merge(m, src)
}
func (m *UpdateServerIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateServerIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServerIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServerIdsRequest proto.InternalMessageInfo

func (m *UpdateServerIdsRequest) GetTopologyUri() string {
	if m != nil {
		return m.TopologyUri
	}
	return ""
}

func (m *UpdateServerIdsRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *UpdateServerIdsRequest) GetServerIds() []string {
	if m != nil {
		return m.ServerIds
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchTopologyRequest)(nil), "FetchTopologyRequest")
	proto.RegisterType((*UpdateTopologyRequest)(nil), "UpdateTopologyRequest")
	proto.RegisterType((*UpdateServerInfoRequest)(nil), "UpdateServerInfoRequest")
	proto.RegisterType((*UpdateServerIdsRequest)(nil), "UpdateServerIdsRequest")
}

func init() { proto.RegisterFile("topomgr/topomgr.proto", fileDescriptor_4b9802c6f2bebbad) }

var fileDescriptor_4b9802c6f2bebbad = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcb, 0x6a, 0xc2, 0x40,
	0x14, 0x35, 0x0a, 0xc5, 0xdc, 0xf4, 0xc5, 0x50, 0x35, 0x28, 0x0d, 0x36, 0x20, 0xb8, 0x28, 0x13,
	0xd0, 0x45, 0xe9, 0x56, 0x5a, 0xc1, 0x45, 0x37, 0xb6, 0x6e, 0xba, 0x91, 0xd1, 0x8c, 0x31, 0x90,
	0x38, 0xe9, 0x64, 0x62, 0xb1, 0x3f, 0xd0, 0x1f, 0xe8, 0xa2, 0x9f, 0xd4, 0x65, 0x3f, 0xa1, 0xd8,
	0x1f, 0x29, 0x66, 0x1c, 0x5b, 0x45, 0x0b, 0xae, 0x32, 0xf7, 0x9e, 0xcc, 0x3d, 0x87, 0x7b, 0xce,
	0x40, 0x41, 0xb0, 0x88, 0x85, 0x1e, 0x77, 0x96, 0x5f, 0x1c, 0x71, 0x26, 0x58, 0xb9, 0xe2, 0x31,
	0xe6, 0x05, 0xd4, 0x49, 0xab, 0x41, 0x32, 0x72, 0x68, 0x18, 0x89, 0xd9, 0x12, 0x2c, 0x3d, 0x93,
	0x20, 0xa0, 0x24, 0xf2, 0x1d, 0x75, 0x90, 0x80, 0x7d, 0x0d, 0x67, 0x6d, 0x2a, 0x86, 0xe3, 0x07,
	0x16, 0xb1, 0x80, 0x79, 0xb3, 0x2e, 0x7d, 0x4a, 0x68, 0x2c, 0xd0, 0x05, 0x1c, 0x8a, 0x65, 0xab,
	0x9f, 0x70, 0xdf, 0xd4, 0xaa, 0x5a, 0x5d, 0xef, 0x1a, 0xaa, 0xd7, 0xe3, 0xbe, 0x4d, 0xa0, 0xd0,
	0x8b, 0x5c, 0x22, 0xe8, 0xfe, 0x77, 0x51, 0x0d, 0xf2, 0xaa, 0x34, 0xb3, 0x55, 0xad, 0x6e, 0x34,
	0x74, 0xbc, 0x1a, 0xb3, 0x82, 0xec, 0x57, 0x0d, 0x4a, 0x92, 0xe3, 0x9e, 0xf2, 0x29, 0xe5, 0x9d,
	0xc9, 0x88, 0xed, 0xc1, 0x52, 0x01, 0x3d, 0x4e, 0xef, 0xf5, 0x7d, 0x37, 0xa5, 0xd1, 0xbb, 0x79,
	0xd9, 0xe8, 0xb8, 0xe8, 0x12, 0x0c, 0x05, 0x4e, 0x46, 0xcc, 0xcc, 0xa5, 0x2a, 0x0c, 0xfc, 0x87,
	0x08, 0xe2, 0xd5, 0xd9, 0x9e, 0x41, 0x71, 0x4d, 0x88, 0x1b, 0xef, 0xa1, 0xe3, 0x1c, 0x20, 0x16,
	0x9c, 0x92, 0x30, 0xfd, 0x41, 0x0a, 0xd1, 0x65, 0x47, 0xc1, 0x4a, 0x66, 0x6c, 0xe6, 0xaa, 0xb9,
	0x14, 0x56, 0x3c, 0x8d, 0xb7, 0x2c, 0x18, 0x8b, 0xdd, 0xdc, 0x91, 0x09, 0xf1, 0x28, 0x47, 0x4d,
	0x38, 0x5a, 0xb3, 0x0c, 0x15, 0xf0, 0x36, 0x0b, 0xcb, 0xbf, 0x1b, 0xb5, 0x33, 0xa8, 0x05, 0xc7,
	0xeb, 0x66, 0xa1, 0x22, 0xde, 0xea, 0x5e, 0xb9, 0x88, 0x65, 0x90, 0xb0, 0x0a, 0x12, 0xbe, 0x5d,
	0x04, 0xc9, 0xce, 0xa0, 0x36, 0x9c, 0x6e, 0x9a, 0x81, 0x4c, 0xbc, 0xc3, 0x9f, 0x7f, 0xe6, 0xdc,
	0xc0, 0xc9, 0xc6, 0x2e, 0x51, 0x09, 0x6f, 0xdf, 0xee, 0xee, 0x29, 0xad, 0xab, 0x8f, 0xb9, 0xa5,
	0x7d, 0xce, 0x2d, 0xed, 0x6b, 0x6e, 0x69, 0xef, 0xdf, 0x56, 0xe6, 0xb1, 0xe6, 0xf9, 0x62, 0x9c,
	0x0c, 0xf0, 0x90, 0x85, 0xce, 0xcb, 0xd4, 0x27, 0x6e, 0x28, 0xd3, 0x2e, 0x9f, 0x84, 0x7a, 0x2e,
	0x83, 0x83, 0xb4, 0x6c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xfd, 0x4e, 0xc6, 0x48, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopoManagerClient is the client API for TopoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopoManagerClient interface {
	FetchTopology(ctx context.Context, in *FetchTopologyRequest, opts ...grpc.CallOption) (*walleapi.Topology, error)
	// TODO(zviad): This method may not be needed.
	UpdateTopology(ctx context.Context, in *UpdateTopologyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateServerInfo(ctx context.Context, in *UpdateServerInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateServerIds(ctx context.Context, in *UpdateServerIdsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type topoManagerClient struct {
	cc *grpc.ClientConn
}

func NewTopoManagerClient(cc *grpc.ClientConn) TopoManagerClient {
	return &topoManagerClient{cc}
}

func (c *topoManagerClient) FetchTopology(ctx context.Context, in *FetchTopologyRequest, opts ...grpc.CallOption) (*walleapi.Topology, error) {
	out := new(walleapi.Topology)
	err := c.cc.Invoke(ctx, "/TopoManager/FetchTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) UpdateTopology(ctx context.Context, in *UpdateTopologyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/UpdateTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) UpdateServerInfo(ctx context.Context, in *UpdateServerInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/UpdateServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topoManagerClient) UpdateServerIds(ctx context.Context, in *UpdateServerIdsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/TopoManager/UpdateServerIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopoManagerServer is the server API for TopoManager service.
type TopoManagerServer interface {
	FetchTopology(context.Context, *FetchTopologyRequest) (*walleapi.Topology, error)
	// TODO(zviad): This method may not be needed.
	UpdateTopology(context.Context, *UpdateTopologyRequest) (*empty.Empty, error)
	UpdateServerInfo(context.Context, *UpdateServerInfoRequest) (*empty.Empty, error)
	UpdateServerIds(context.Context, *UpdateServerIdsRequest) (*empty.Empty, error)
}

func RegisterTopoManagerServer(s *grpc.Server, srv TopoManagerServer) {
	s.RegisterService(&_TopoManager_serviceDesc, srv)
}

func _TopoManager_FetchTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).FetchTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/FetchTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).FetchTopology(ctx, req.(*FetchTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_UpdateTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).UpdateTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/UpdateTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).UpdateTopology(ctx, req.(*UpdateTopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_UpdateServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).UpdateServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/UpdateServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).UpdateServerInfo(ctx, req.(*UpdateServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopoManager_UpdateServerIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopoManagerServer).UpdateServerIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopoManager/UpdateServerIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopoManagerServer).UpdateServerIds(ctx, req.(*UpdateServerIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopoManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TopoManager",
	HandlerType: (*TopoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchTopology",
			Handler:    _TopoManager_FetchTopology_Handler,
		},
		{
			MethodName: "UpdateTopology",
			Handler:    _TopoManager_UpdateTopology_Handler,
		},
		{
			MethodName: "UpdateServerInfo",
			Handler:    _TopoManager_UpdateServerInfo_Handler,
		},
		{
			MethodName: "UpdateServerIds",
			Handler:    _TopoManager_UpdateServerIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topomgr/topomgr.proto",
}

func (m *FetchTopologyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTopologyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopologyUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.TopologyUri)))
		i += copy(dAtA[i:], m.TopologyUri)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateTopologyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTopologyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopologyUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.TopologyUri)))
		i += copy(dAtA[i:], m.TopologyUri)
	}
	if m.Topology != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(m.Topology.Size()))
		n1, err := m.Topology.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateServerInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServerInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopologyUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.TopologyUri)))
		i += copy(dAtA[i:], m.TopologyUri)
	}
	if len(m.ServerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if m.ServerInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(m.ServerInfo.Size()))
		n2, err := m.ServerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateServerIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateServerIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TopologyUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.TopologyUri)))
		i += copy(dAtA[i:], m.TopologyUri)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTopomgr(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTopomgr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FetchTopologyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopologyUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateTopologyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopologyUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.Topology != nil {
		l = m.Topology.Size()
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateServerInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopologyUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.ServerInfo != nil {
		l = m.ServerInfo.Size()
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateServerIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopologyUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovTopomgr(uint64(l))
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			l = len(s)
			n += 1 + l + sovTopomgr(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTopomgr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopomgr(x uint64) (n int) {
	return sovTopomgr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FetchTopologyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTopologyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTopologyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTopologyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTopologyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTopologyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topology", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topology == nil {
				m.Topology = &walleapi.Topology{}
			}
			if err := m.Topology.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServerInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServerInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServerInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerInfo == nil {
				m.ServerInfo = &walleapi.ServerInfo{}
			}
			if err := m.ServerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateServerIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateServerIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateServerIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopologyUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopologyUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopomgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTopomgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIds = append(m.ServerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopomgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTopomgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopomgr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopomgr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopomgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTopomgr
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTopomgr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopomgr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopomgr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTopomgr
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopomgr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopomgr   = fmt.Errorf("proto: integer overflow")
)

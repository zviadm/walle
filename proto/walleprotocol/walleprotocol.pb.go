// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: walleprotocol/walleprotocol.proto

package walleprotocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	walleapi "walleapi"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamTopology struct {
	Version              int64    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ServerIds            []string `protobuf:"bytes,2,rep,name=server_ids,json=serverIds,proto3" json:"server_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamTopology) Reset()         { *m = StreamTopology{} }
func (m *StreamTopology) String() string { return proto.CompactTextString(m) }
func (*StreamTopology) ProtoMessage()    {}
func (*StreamTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{0}
}
func (m *StreamTopology) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamTopology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamTopology.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamTopology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamTopology.Merge(m, src)
}
func (m *StreamTopology) XXX_Size() int {
	return m.Size()
}
func (m *StreamTopology) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamTopology.DiscardUnknown(m)
}

var xxx_messageInfo_StreamTopology proto.InternalMessageInfo

func (m *StreamTopology) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StreamTopology) GetServerIds() []string {
	if m != nil {
		return m.ServerIds
	}
	return nil
}

type NewWriterRequest struct {
	StreamUri            string   `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	TargetServerId       string   `protobuf:"bytes,2,opt,name=target_server_id,json=targetServerId,proto3" json:"target_server_id,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	WriterId             string   `protobuf:"bytes,4,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWriterRequest) Reset()         { *m = NewWriterRequest{} }
func (m *NewWriterRequest) String() string { return proto.CompactTextString(m) }
func (*NewWriterRequest) ProtoMessage()    {}
func (*NewWriterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{1}
}
func (m *NewWriterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWriterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWriterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWriterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWriterRequest.Merge(m, src)
}
func (m *NewWriterRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewWriterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWriterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewWriterRequest proto.InternalMessageInfo

func (m *NewWriterRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *NewWriterRequest) GetTargetServerId() string {
	if m != nil {
		return m.TargetServerId
	}
	return ""
}

func (m *NewWriterRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *NewWriterRequest) GetWriterId() string {
	if m != nil {
		return m.WriterId
	}
	return ""
}

type PutEntryInternalRequest struct {
	StreamUri            string          `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	TargetServerId       string          `protobuf:"bytes,2,opt,name=target_server_id,json=targetServerId,proto3" json:"target_server_id,omitempty"`
	StreamVersion        int64           `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	Entry                *walleapi.Entry `protobuf:"bytes,4,opt,name=entry,proto3" json:"entry,omitempty"`
	CommittedEntryId     int64           `protobuf:"varint,5,opt,name=committed_entry_id,json=committedEntryId,proto3" json:"committed_entry_id,omitempty"`
	CommittedEntryMd5    []byte          `protobuf:"bytes,6,opt,name=committed_entry_md5,json=committedEntryMd5,proto3" json:"committed_entry_md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PutEntryInternalRequest) Reset()         { *m = PutEntryInternalRequest{} }
func (m *PutEntryInternalRequest) String() string { return proto.CompactTextString(m) }
func (*PutEntryInternalRequest) ProtoMessage()    {}
func (*PutEntryInternalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{2}
}
func (m *PutEntryInternalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutEntryInternalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutEntryInternalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutEntryInternalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEntryInternalRequest.Merge(m, src)
}
func (m *PutEntryInternalRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutEntryInternalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEntryInternalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutEntryInternalRequest proto.InternalMessageInfo

func (m *PutEntryInternalRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *PutEntryInternalRequest) GetTargetServerId() string {
	if m != nil {
		return m.TargetServerId
	}
	return ""
}

func (m *PutEntryInternalRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *PutEntryInternalRequest) GetEntry() *walleapi.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *PutEntryInternalRequest) GetCommittedEntryId() int64 {
	if m != nil {
		return m.CommittedEntryId
	}
	return 0
}

func (m *PutEntryInternalRequest) GetCommittedEntryMd5() []byte {
	if m != nil {
		return m.CommittedEntryMd5
	}
	return nil
}

type BaseResponse struct {
	SuccessIds           []string `protobuf:"bytes,1,rep,name=success_ids,json=successIds,proto3" json:"success_ids,omitempty"`
	Fails                int32    `protobuf:"varint,2,opt,name=fails,proto3" json:"fails,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{3}
}
func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetSuccessIds() []string {
	if m != nil {
		return m.SuccessIds
	}
	return nil
}

func (m *BaseResponse) GetFails() int32 {
	if m != nil {
		return m.Fails
	}
	return 0
}

func (m *BaseResponse) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

type LastEntryRequest struct {
	StreamUri            string   `protobuf:"bytes,1,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	TargetServerId       string   `protobuf:"bytes,2,opt,name=target_server_id,json=targetServerId,proto3" json:"target_server_id,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	IncludeUncommitted   bool     `protobuf:"varint,4,opt,name=include_uncommitted,json=includeUncommitted,proto3" json:"include_uncommitted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastEntryRequest) Reset()         { *m = LastEntryRequest{} }
func (m *LastEntryRequest) String() string { return proto.CompactTextString(m) }
func (*LastEntryRequest) ProtoMessage()    {}
func (*LastEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{4}
}
func (m *LastEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEntryRequest.Merge(m, src)
}
func (m *LastEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *LastEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastEntryRequest proto.InternalMessageInfo

func (m *LastEntryRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *LastEntryRequest) GetTargetServerId() string {
	if m != nil {
		return m.TargetServerId
	}
	return ""
}

func (m *LastEntryRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *LastEntryRequest) GetIncludeUncommitted() bool {
	if m != nil {
		return m.IncludeUncommitted
	}
	return false
}

type LastEntryResponse struct {
	Entries              []*walleapi.Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LastEntryResponse) Reset()         { *m = LastEntryResponse{} }
func (m *LastEntryResponse) String() string { return proto.CompactTextString(m) }
func (*LastEntryResponse) ProtoMessage()    {}
func (*LastEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcc46354341bf9bc, []int{5}
}
func (m *LastEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEntryResponse.Merge(m, src)
}
func (m *LastEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *LastEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastEntryResponse proto.InternalMessageInfo

func (m *LastEntryResponse) GetEntries() []*walleapi.Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamTopology)(nil), "StreamTopology")
	proto.RegisterType((*NewWriterRequest)(nil), "NewWriterRequest")
	proto.RegisterType((*PutEntryInternalRequest)(nil), "PutEntryInternalRequest")
	proto.RegisterType((*BaseResponse)(nil), "BaseResponse")
	proto.RegisterType((*LastEntryRequest)(nil), "LastEntryRequest")
	proto.RegisterType((*LastEntryResponse)(nil), "LastEntryResponse")
}

func init() { proto.RegisterFile("walleprotocol/walleprotocol.proto", fileDescriptor_bcc46354341bf9bc) }

var fileDescriptor_bcc46354341bf9bc = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x24, 0x8d, 0xa7, 0x4d, 0xe4, 0x6c, 0x91, 0x6a, 0x05, 0x08, 0xc1, 0x12, 0x52,
	0x0e, 0xc8, 0x91, 0x0a, 0xf9, 0x81, 0x4a, 0x1c, 0x2c, 0x01, 0xaa, 0x5c, 0x4a, 0x8f, 0x96, 0xb1,
	0x87, 0x6a, 0x25, 0xc7, 0x0e, 0xbb, 0xeb, 0x46, 0xfd, 0x00, 0xfe, 0x81, 0x1b, 0x5f, 0xc0, 0x89,
	0x9f, 0xe0, 0xc8, 0x27, 0xa0, 0xf0, 0x23, 0xc8, 0xb3, 0xb6, 0xdb, 0xa6, 0x42, 0xe2, 0x96, 0xdb,
	0xee, 0x9b, 0x99, 0xe7, 0x37, 0x6f, 0x76, 0x0c, 0xcf, 0xd6, 0x51, 0x9a, 0xe2, 0x4a, 0xe6, 0x3a,
	0x8f, 0xf3, 0x74, 0x7e, 0xe7, 0xe6, 0xd1, 0x61, 0x7c, 0x44, 0x60, 0xb4, 0x12, 0xf3, 0xfa, 0x60,
	0x02, 0xae, 0x0f, 0xc3, 0x33, 0x2d, 0x31, 0x5a, 0xbe, 0xcf, 0x57, 0x79, 0x9a, 0x5f, 0x5e, 0x73,
	0x07, 0xf6, 0xae, 0x50, 0x2a, 0x91, 0x67, 0x0e, 0x9b, 0xb2, 0x59, 0x27, 0xa8, 0xaf, 0xfc, 0x09,
	0x80, 0x42, 0x79, 0x85, 0x32, 0x14, 0x89, 0x72, 0xda, 0xd3, 0xce, 0xcc, 0x0a, 0x2c, 0x83, 0xf8,
	0x89, 0x72, 0xbf, 0x31, 0xb0, 0xdf, 0xe1, 0xfa, 0x42, 0x0a, 0x8d, 0x32, 0xc0, 0xcf, 0x05, 0x2a,
	0x4d, 0x35, 0xc4, 0x1f, 0x16, 0x52, 0x10, 0x61, 0x59, 0x43, 0xc8, 0xb9, 0x14, 0x7c, 0x06, 0xb6,
	0x8e, 0xe4, 0x25, 0xea, 0xb0, 0x61, 0x76, 0xda, 0x94, 0x34, 0x34, 0xf8, 0x59, 0x45, 0xcf, 0x9f,
	0xc3, 0xb0, 0x22, 0xaa, 0xd5, 0x75, 0x48, 0xdd, 0xc0, 0xa0, 0x1f, 0x2a, 0x8d, 0x8f, 0xc0, 0x5a,
	0x93, 0x80, 0x92, 0xe9, 0x01, 0x31, 0xf5, 0x0d, 0xe0, 0x27, 0xee, 0x97, 0x36, 0x1c, 0x9d, 0x16,
	0xfa, 0x75, 0xa6, 0xe5, 0xb5, 0x9f, 0x69, 0x94, 0x59, 0x94, 0xee, 0x4a, 0xe8, 0x63, 0xe8, 0x62,
	0xa9, 0x83, 0x44, 0xee, 0x1f, 0xf7, 0x3c, 0x52, 0x15, 0x18, 0x90, 0xbf, 0x00, 0x1e, 0xe7, 0xcb,
	0xa5, 0xd0, 0x1a, 0x93, 0x90, 0xa0, 0xf2, 0x83, 0x5d, 0x22, 0xb2, 0x9b, 0x88, 0x69, 0x24, 0xe1,
	0x1e, 0x1c, 0x6e, 0x67, 0x2f, 0x93, 0x85, 0xd3, 0x9b, 0xb2, 0xd9, 0x41, 0x30, 0xba, 0x9b, 0xfe,
	0x36, 0x59, 0xb8, 0x29, 0x1c, 0x9c, 0x44, 0x0a, 0x03, 0x54, 0xab, 0x3c, 0x53, 0xc8, 0x9f, 0xc2,
	0xbe, 0x2a, 0xe2, 0x18, 0x95, 0xa2, 0xc9, 0x32, 0x9a, 0x2c, 0x54, 0x90, 0x9f, 0x28, 0xfe, 0x10,
	0xba, 0x9f, 0x22, 0x91, 0x2a, 0x6a, 0xb9, 0x1b, 0x98, 0xcb, 0x7f, 0x76, 0xea, 0xfe, 0x60, 0x60,
	0xbf, 0x89, 0x94, 0xb1, 0x7d, 0x57, 0x76, 0xcf, 0xe1, 0x50, 0x64, 0x71, 0x5a, 0x24, 0x18, 0x16,
	0x59, 0xe3, 0x08, 0x99, 0xdf, 0x0f, 0x78, 0x15, 0x3a, 0xbf, 0x89, 0xb8, 0x0b, 0x18, 0xdd, 0x12,
	0x5d, 0x19, 0x35, 0x85, 0xbd, 0xd2, 0x5e, 0x81, 0xc6, 0xa4, 0x9b, 0xb1, 0xd5, 0xf0, 0xf1, 0x77,
	0x06, 0x83, 0x8b, 0x72, 0xc5, 0x4e, 0xab, 0x05, 0xe4, 0x73, 0xb0, 0x9a, 0xad, 0xe0, 0x23, 0x6f,
	0x7b, 0x43, 0xc6, 0x03, 0xef, 0xf6, 0x2c, 0xdc, 0x16, 0x5f, 0x40, 0xbf, 0x7e, 0xa4, 0xdc, 0xf1,
	0xfe, 0xf1, 0x5e, 0xef, 0x97, 0xbd, 0x02, 0xab, 0x11, 0xcc, 0x47, 0xde, 0xb6, 0xe3, 0x63, 0xee,
	0xdd, 0xeb, 0xc7, 0x6d, 0x9d, 0xd8, 0x3f, 0x37, 0x13, 0xf6, 0x6b, 0x33, 0x61, 0xbf, 0x37, 0x13,
	0xf6, 0xf5, 0xcf, 0xa4, 0xf5, 0xb1, 0x47, 0x3f, 0x86, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x9a, 0x24, 0x6d, 0xaf, 0x56, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalleProtocolClient is the client API for WalleProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalleProtocolClient interface {
	NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	PutEntry(ctx context.Context, in *PutEntryInternalRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	LastEntry(ctx context.Context, in *LastEntryRequest, opts ...grpc.CallOption) (*LastEntryResponse, error)
}

type walleProtocolClient struct {
	cc *grpc.ClientConn
}

func NewWalleProtocolClient(cc *grpc.ClientConn) WalleProtocolClient {
	return &walleProtocolClient{cc}
}

func (c *walleProtocolClient) NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/WalleProtocol/NewWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleProtocolClient) PutEntry(ctx context.Context, in *PutEntryInternalRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/WalleProtocol/PutEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleProtocolClient) LastEntry(ctx context.Context, in *LastEntryRequest, opts ...grpc.CallOption) (*LastEntryResponse, error) {
	out := new(LastEntryResponse)
	err := c.cc.Invoke(ctx, "/WalleProtocol/LastEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalleProtocolServer is the server API for WalleProtocol service.
type WalleProtocolServer interface {
	NewWriter(context.Context, *NewWriterRequest) (*BaseResponse, error)
	PutEntry(context.Context, *PutEntryInternalRequest) (*BaseResponse, error)
	LastEntry(context.Context, *LastEntryRequest) (*LastEntryResponse, error)
}

func RegisterWalleProtocolServer(s *grpc.Server, srv WalleProtocolServer) {
	s.RegisterService(&_WalleProtocol_serviceDesc, srv)
}

func _WalleProtocol_NewWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleProtocolServer).NewWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleProtocol/NewWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleProtocolServer).NewWriter(ctx, req.(*NewWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleProtocol_PutEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEntryInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleProtocolServer).PutEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleProtocol/PutEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleProtocolServer).PutEntry(ctx, req.(*PutEntryInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalleProtocol_LastEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleProtocolServer).LastEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalleProtocol/LastEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleProtocolServer).LastEntry(ctx, req.(*LastEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalleProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WalleProtocol",
	HandlerType: (*WalleProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWriter",
			Handler:    _WalleProtocol_NewWriter_Handler,
		},
		{
			MethodName: "PutEntry",
			Handler:    _WalleProtocol_PutEntry_Handler,
		},
		{
			MethodName: "LastEntry",
			Handler:    _WalleProtocol_LastEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "walleprotocol/walleprotocol.proto",
}

func (m *StreamTopology) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTopology) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.Version))
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewWriterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWriterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if len(m.TargetServerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.TargetServerId)))
		i += copy(dAtA[i:], m.TargetServerId)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.WriterId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.WriterId)))
		i += copy(dAtA[i:], m.WriterId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutEntryInternalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutEntryInternalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if len(m.TargetServerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.TargetServerId)))
		i += copy(dAtA[i:], m.TargetServerId)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.StreamVersion))
	}
	if m.Entry != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.Entry.Size()))
		n1, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CommittedEntryId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.CommittedEntryId))
	}
	if len(m.CommittedEntryMd5) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.CommittedEntryMd5)))
		i += copy(dAtA[i:], m.CommittedEntryMd5)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SuccessIds) > 0 {
		for _, s := range m.SuccessIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Fails != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.Fails))
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.StreamVersion))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LastEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if len(m.TargetServerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(len(m.TargetServerId)))
		i += copy(dAtA[i:], m.TargetServerId)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalleprotocol(dAtA, i, uint64(m.StreamVersion))
	}
	if m.IncludeUncommitted {
		dAtA[i] = 0x20
		i++
		if m.IncludeUncommitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LastEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWalleprotocol(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWalleprotocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StreamTopology) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovWalleprotocol(uint64(m.Version))
	}
	if len(m.ServerIds) > 0 {
		for _, s := range m.ServerIds {
			l = len(s)
			n += 1 + l + sovWalleprotocol(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewWriterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	l = len(m.TargetServerId)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalleprotocol(uint64(m.StreamVersion))
	}
	l = len(m.WriterId)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutEntryInternalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	l = len(m.TargetServerId)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalleprotocol(uint64(m.StreamVersion))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.CommittedEntryId != 0 {
		n += 1 + sovWalleprotocol(uint64(m.CommittedEntryId))
	}
	l = len(m.CommittedEntryMd5)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuccessIds) > 0 {
		for _, s := range m.SuccessIds {
			l = len(s)
			n += 1 + l + sovWalleprotocol(uint64(l))
		}
	}
	if m.Fails != 0 {
		n += 1 + sovWalleprotocol(uint64(m.Fails))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalleprotocol(uint64(m.StreamVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LastEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	l = len(m.TargetServerId)
	if l > 0 {
		n += 1 + l + sovWalleprotocol(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalleprotocol(uint64(m.StreamVersion))
	}
	if m.IncludeUncommitted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LastEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovWalleprotocol(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWalleprotocol(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWalleprotocol(x uint64) (n int) {
	return sovWalleprotocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamTopology) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTopology: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTopology: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerIds = append(m.ServerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWriterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWriterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWriterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutEntryInternalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutEntryInternalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutEntryInternalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &walleapi.Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryId", wireType)
			}
			m.CommittedEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryMd5", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommittedEntryMd5 = append(m.CommittedEntryMd5[:0], dAtA[iNdEx:postIndex]...)
			if m.CommittedEntryMd5 == nil {
				m.CommittedEntryMd5 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessIds = append(m.SuccessIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fails", wireType)
			}
			m.Fails = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fails |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUncommitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUncommitted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &walleapi.Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalleprotocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalleprotocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWalleprotocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWalleprotocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalleprotocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWalleprotocol
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWalleprotocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWalleprotocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWalleprotocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWalleprotocol
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWalleprotocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWalleprotocol   = fmt.Errorf("proto: integer overflow")
)

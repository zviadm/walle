// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: walle/walle.proto

package walle

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	walleapi "github.com/zviadm/walle/proto/walleapi"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewWriterRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StreamUri            string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	FromServerId         string   `protobuf:"bytes,4,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	WriterId             []byte   `protobuf:"bytes,5,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	WriterAddr           string   `protobuf:"bytes,6,opt,name=writer_addr,json=writerAddr,proto3" json:"writer_addr,omitempty"`
	LeaseMs              int64    `protobuf:"varint,7,opt,name=lease_ms,json=leaseMs,proto3" json:"lease_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWriterRequest) Reset()         { *m = NewWriterRequest{} }
func (m *NewWriterRequest) String() string { return proto.CompactTextString(m) }
func (*NewWriterRequest) ProtoMessage()    {}
func (*NewWriterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{0}
}
func (m *NewWriterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWriterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWriterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWriterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWriterRequest.Merge(m, src)
}
func (m *NewWriterRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewWriterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWriterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewWriterRequest proto.InternalMessageInfo

func (m *NewWriterRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *NewWriterRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *NewWriterRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *NewWriterRequest) GetFromServerId() string {
	if m != nil {
		return m.FromServerId
	}
	return ""
}

func (m *NewWriterRequest) GetWriterId() []byte {
	if m != nil {
		return m.WriterId
	}
	return nil
}

func (m *NewWriterRequest) GetWriterAddr() string {
	if m != nil {
		return m.WriterAddr
	}
	return ""
}

func (m *NewWriterRequest) GetLeaseMs() int64 {
	if m != nil {
		return m.LeaseMs
	}
	return 0
}

type NewWriterResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWriterResponse) Reset()         { *m = NewWriterResponse{} }
func (m *NewWriterResponse) String() string { return proto.CompactTextString(m) }
func (*NewWriterResponse) ProtoMessage()    {}
func (*NewWriterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{1}
}
func (m *NewWriterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWriterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWriterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewWriterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWriterResponse.Merge(m, src)
}
func (m *NewWriterResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewWriterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWriterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewWriterResponse proto.InternalMessageInfo

type WriterInfoRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StreamUri            string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	FromServerId         string   `protobuf:"bytes,4,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriterInfoRequest) Reset()         { *m = WriterInfoRequest{} }
func (m *WriterInfoRequest) String() string { return proto.CompactTextString(m) }
func (*WriterInfoRequest) ProtoMessage()    {}
func (*WriterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{2}
}
func (m *WriterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriterInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriterInfoRequest.Merge(m, src)
}
func (m *WriterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *WriterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriterInfoRequest proto.InternalMessageInfo

func (m *WriterInfoRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *WriterInfoRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *WriterInfoRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *WriterInfoRequest) GetFromServerId() string {
	if m != nil {
		return m.FromServerId
	}
	return ""
}

type WriterInfoResponse struct {
	WriterId             []byte   `protobuf:"bytes,1,opt,name=writer_id,json=writerId,proto3" json:"writer_id,omitempty"`
	WriterAddr           string   `protobuf:"bytes,2,opt,name=writer_addr,json=writerAddr,proto3" json:"writer_addr,omitempty"`
	LeaseMs              int64    `protobuf:"varint,3,opt,name=lease_ms,json=leaseMs,proto3" json:"lease_ms,omitempty"`
	RemainingLeaseMs     int64    `protobuf:"varint,4,opt,name=remaining_lease_ms,json=remainingLeaseMs,proto3" json:"remaining_lease_ms,omitempty"`
	StreamVersion        int64    `protobuf:"varint,5,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriterInfoResponse) Reset()         { *m = WriterInfoResponse{} }
func (m *WriterInfoResponse) String() string { return proto.CompactTextString(m) }
func (*WriterInfoResponse) ProtoMessage()    {}
func (*WriterInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{3}
}
func (m *WriterInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriterInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriterInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriterInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriterInfoResponse.Merge(m, src)
}
func (m *WriterInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriterInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriterInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriterInfoResponse proto.InternalMessageInfo

func (m *WriterInfoResponse) GetWriterId() []byte {
	if m != nil {
		return m.WriterId
	}
	return nil
}

func (m *WriterInfoResponse) GetWriterAddr() string {
	if m != nil {
		return m.WriterAddr
	}
	return ""
}

func (m *WriterInfoResponse) GetLeaseMs() int64 {
	if m != nil {
		return m.LeaseMs
	}
	return 0
}

func (m *WriterInfoResponse) GetRemainingLeaseMs() int64 {
	if m != nil {
		return m.RemainingLeaseMs
	}
	return 0
}

func (m *WriterInfoResponse) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

type PutEntryInternalRequest struct {
	ServerId             string          `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StreamUri            string          `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	StreamVersion        int64           `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	FromServerId         string          `protobuf:"bytes,4,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	Entry                *walleapi.Entry `protobuf:"bytes,5,opt,name=entry,proto3" json:"entry,omitempty"`
	CommittedEntryId     int64           `protobuf:"varint,6,opt,name=committed_entry_id,json=committedEntryId,proto3" json:"committed_entry_id,omitempty"`
	CommittedEntryXX     uint64          `protobuf:"varint,7,opt,name=committed_entry_x_x,json=committedEntryXX,proto3" json:"committed_entry_x_x,omitempty"`
	IgnoreLeaseRenew     bool            `protobuf:"varint,8,opt,name=ignore_lease_renew,json=ignoreLeaseRenew,proto3" json:"ignore_lease_renew,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PutEntryInternalRequest) Reset()         { *m = PutEntryInternalRequest{} }
func (m *PutEntryInternalRequest) String() string { return proto.CompactTextString(m) }
func (*PutEntryInternalRequest) ProtoMessage()    {}
func (*PutEntryInternalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{4}
}
func (m *PutEntryInternalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutEntryInternalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutEntryInternalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutEntryInternalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEntryInternalRequest.Merge(m, src)
}
func (m *PutEntryInternalRequest) XXX_Size() int {
	return m.Size()
}
func (m *PutEntryInternalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEntryInternalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PutEntryInternalRequest proto.InternalMessageInfo

func (m *PutEntryInternalRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *PutEntryInternalRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *PutEntryInternalRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *PutEntryInternalRequest) GetFromServerId() string {
	if m != nil {
		return m.FromServerId
	}
	return ""
}

func (m *PutEntryInternalRequest) GetEntry() *walleapi.Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *PutEntryInternalRequest) GetCommittedEntryId() int64 {
	if m != nil {
		return m.CommittedEntryId
	}
	return 0
}

func (m *PutEntryInternalRequest) GetCommittedEntryXX() uint64 {
	if m != nil {
		return m.CommittedEntryXX
	}
	return 0
}

func (m *PutEntryInternalRequest) GetIgnoreLeaseRenew() bool {
	if m != nil {
		return m.IgnoreLeaseRenew
	}
	return false
}

type PutEntryInternalResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutEntryInternalResponse) Reset()         { *m = PutEntryInternalResponse{} }
func (m *PutEntryInternalResponse) String() string { return proto.CompactTextString(m) }
func (*PutEntryInternalResponse) ProtoMessage()    {}
func (*PutEntryInternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{5}
}
func (m *PutEntryInternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutEntryInternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutEntryInternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutEntryInternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutEntryInternalResponse.Merge(m, src)
}
func (m *PutEntryInternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *PutEntryInternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PutEntryInternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PutEntryInternalResponse proto.InternalMessageInfo

type TailEntriesRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StreamUri            string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	FromServerId         string   `protobuf:"bytes,4,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TailEntriesRequest) Reset()         { *m = TailEntriesRequest{} }
func (m *TailEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*TailEntriesRequest) ProtoMessage()    {}
func (*TailEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{6}
}
func (m *TailEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TailEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TailEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TailEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TailEntriesRequest.Merge(m, src)
}
func (m *TailEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *TailEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TailEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TailEntriesRequest proto.InternalMessageInfo

func (m *TailEntriesRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *TailEntriesRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *TailEntriesRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *TailEntriesRequest) GetFromServerId() string {
	if m != nil {
		return m.FromServerId
	}
	return ""
}

type ReadEntriesRequest struct {
	ServerId             string   `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	StreamUri            string   `protobuf:"bytes,2,opt,name=stream_uri,json=streamUri,proto3" json:"stream_uri,omitempty"`
	StreamVersion        int64    `protobuf:"varint,3,opt,name=stream_version,json=streamVersion,proto3" json:"stream_version,omitempty"`
	FromServerId         string   `protobuf:"bytes,4,opt,name=from_server_id,json=fromServerId,proto3" json:"from_server_id,omitempty"`
	StartEntryId         int64    `protobuf:"varint,5,opt,name=start_entry_id,json=startEntryId,proto3" json:"start_entry_id,omitempty"`
	EndEntryId           int64    `protobuf:"varint,6,opt,name=end_entry_id,json=endEntryId,proto3" json:"end_entry_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadEntriesRequest) Reset()         { *m = ReadEntriesRequest{} }
func (m *ReadEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ReadEntriesRequest) ProtoMessage()    {}
func (*ReadEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_827f2b64ddfdb030, []int{7}
}
func (m *ReadEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadEntriesRequest.Merge(m, src)
}
func (m *ReadEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadEntriesRequest proto.InternalMessageInfo

func (m *ReadEntriesRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ReadEntriesRequest) GetStreamUri() string {
	if m != nil {
		return m.StreamUri
	}
	return ""
}

func (m *ReadEntriesRequest) GetStreamVersion() int64 {
	if m != nil {
		return m.StreamVersion
	}
	return 0
}

func (m *ReadEntriesRequest) GetFromServerId() string {
	if m != nil {
		return m.FromServerId
	}
	return ""
}

func (m *ReadEntriesRequest) GetStartEntryId() int64 {
	if m != nil {
		return m.StartEntryId
	}
	return 0
}

func (m *ReadEntriesRequest) GetEndEntryId() int64 {
	if m != nil {
		return m.EndEntryId
	}
	return 0
}

func init() {
	proto.RegisterType((*NewWriterRequest)(nil), "NewWriterRequest")
	proto.RegisterType((*NewWriterResponse)(nil), "NewWriterResponse")
	proto.RegisterType((*WriterInfoRequest)(nil), "WriterInfoRequest")
	proto.RegisterType((*WriterInfoResponse)(nil), "WriterInfoResponse")
	proto.RegisterType((*PutEntryInternalRequest)(nil), "PutEntryInternalRequest")
	proto.RegisterType((*PutEntryInternalResponse)(nil), "PutEntryInternalResponse")
	proto.RegisterType((*TailEntriesRequest)(nil), "TailEntriesRequest")
	proto.RegisterType((*ReadEntriesRequest)(nil), "ReadEntriesRequest")
}

func init() { proto.RegisterFile("walle/walle.proto", fileDescriptor_827f2b64ddfdb030) }

var fileDescriptor_827f2b64ddfdb030 = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xcd, 0xa4, 0x4d, 0x9a, 0xdc, 0x86, 0x2a, 0xb9, 0x59, 0xd4, 0x75, 0x21, 0x44, 0x06, 0xa4,
	0x2c, 0x60, 0x82, 0x0a, 0x88, 0x35, 0x48, 0x2c, 0x22, 0x01, 0x42, 0xe6, 0xd1, 0x8a, 0x8d, 0xe5,
	0xd6, 0xb7, 0x65, 0xa4, 0x78, 0x5c, 0xc6, 0x93, 0xa6, 0xf0, 0x25, 0x2c, 0x60, 0xc1, 0xaf, 0xb0,
	0x42, 0x62, 0xc3, 0x27, 0xa0, 0x22, 0xfe, 0x80, 0x0f, 0x40, 0x9e, 0x71, 0x1e, 0x8d, 0x69, 0xd7,
	0xd9, 0x44, 0x9e, 0x73, 0x4e, 0xc6, 0xf7, 0x9e, 0x39, 0x73, 0x0d, 0xad, 0x71, 0x38, 0x1c, 0x52,
	0xdf, 0xfc, 0xf2, 0x63, 0x95, 0xe8, 0xc4, 0xdd, 0x34, 0x8b, 0xf0, 0x58, 0xf4, 0x27, 0x0f, 0x96,
	0xf0, 0xfe, 0x32, 0x68, 0x3e, 0xa7, 0xf1, 0xae, 0x12, 0x9a, 0x94, 0x4f, 0xef, 0x47, 0x94, 0x6a,
	0xdc, 0x86, 0x7a, 0x4a, 0xea, 0x84, 0x54, 0x20, 0x22, 0x87, 0x75, 0x59, 0xaf, 0xee, 0xd7, 0x2c,
	0x30, 0x88, 0xf0, 0x1a, 0x40, 0xaa, 0x15, 0x85, 0x71, 0x30, 0x52, 0xc2, 0x29, 0x1b, 0xb6, 0x6e,
	0x91, 0xd7, 0x4a, 0xe0, 0x2d, 0xd8, 0xc8, 0xe9, 0x13, 0x52, 0xa9, 0x48, 0xa4, 0xb3, 0xd2, 0x65,
	0xbd, 0x15, 0xff, 0x8a, 0x45, 0xdf, 0x58, 0x10, 0x6f, 0xc2, 0xc6, 0xa1, 0x4a, 0xe2, 0x60, 0xf6,
	0x9e, 0x55, 0xb3, 0x53, 0x23, 0x43, 0x5f, 0x4e, 0xde, 0xb5, 0x0d, 0xf5, 0xb1, 0xa9, 0x2c, 0x13,
	0x54, 0xba, 0xac, 0xd7, 0xf0, 0x6b, 0x16, 0x18, 0x44, 0x78, 0x1d, 0xd6, 0x73, 0x32, 0x8c, 0x22,
	0xe5, 0x54, 0xcd, 0xff, 0xc1, 0x42, 0x8f, 0xa2, 0x48, 0xe1, 0x16, 0xd4, 0x86, 0x14, 0xa6, 0x14,
	0xc4, 0xa9, 0xb3, 0x66, 0x8a, 0x58, 0x33, 0xeb, 0x67, 0xa9, 0xd7, 0x86, 0xd6, 0x5c, 0xd7, 0xe9,
	0x71, 0x22, 0x53, 0xf2, 0x3e, 0x33, 0x68, 0x59, 0x68, 0x20, 0x0f, 0x93, 0x65, 0x33, 0xc3, 0xfb,
	0xc6, 0x00, 0xe7, 0xcb, 0xb3, 0x55, 0x9f, 0xf7, 0x88, 0x5d, 0xee, 0x51, 0xf9, 0x52, 0x8f, 0x56,
	0xce, 0x79, 0x84, 0xb7, 0x01, 0x15, 0xc5, 0xa1, 0x90, 0x42, 0x1e, 0x05, 0x53, 0xd1, 0xaa, 0x11,
	0x35, 0xa7, 0xcc, 0xd3, 0x5c, 0x5d, 0x6c, 0xb5, 0xf2, 0x9f, 0x56, 0xbd, 0x1f, 0x65, 0xd8, 0x7c,
	0x31, 0xd2, 0x4f, 0xa4, 0x56, 0x1f, 0x06, 0x52, 0x93, 0x92, 0xe1, 0x70, 0xe9, 0x62, 0x77, 0x15,
	0x2a, 0x94, 0x15, 0x68, 0x5a, 0x58, 0xdf, 0xa9, 0x72, 0x53, 0xae, 0x6f, 0xc1, 0xcc, 0x97, 0x83,
	0x24, 0x8e, 0x85, 0xd6, 0x14, 0x05, 0x06, 0xca, 0xf6, 0xa9, 0x5a, 0x5f, 0xa6, 0x8c, 0xed, 0x30,
	0xc2, 0x3b, 0xd0, 0x5e, 0x54, 0x9f, 0x06, 0xa7, 0x26, 0x8f, 0xab, 0x8b, 0xf2, 0xbd, 0xbd, 0x6c,
	0x73, 0x71, 0x24, 0x13, 0x45, 0xb9, 0xe3, 0x8a, 0x24, 0x8d, 0x9d, 0x5a, 0x97, 0xf5, 0x6a, 0x7e,
	0xd3, 0x32, 0xc6, 0x71, 0x3f, 0xc3, 0x3d, 0x17, 0x9c, 0xa2, 0x99, 0x79, 0x9a, 0xbf, 0x30, 0xc0,
	0x57, 0xa1, 0x18, 0x66, 0xac, 0xa0, 0x74, 0xe9, 0xe2, 0xfc, 0x87, 0x01, 0xfa, 0x14, 0x46, 0x4b,
	0x5a, 0x5f, 0xa6, 0x4a, 0x75, 0xa8, 0xf4, 0xec, 0x88, 0x6d, 0xa0, 0x1b, 0x06, 0x9d, 0x1c, 0x6f,
	0x17, 0x1a, 0x24, 0x0b, 0x31, 0x00, 0x92, 0x93, 0x00, 0xec, 0x7c, 0x2d, 0x43, 0x65, 0x37, 0x1b,
	0xba, 0x78, 0x1f, 0xea, 0xd3, 0xa1, 0x83, 0x2d, 0xbe, 0x38, 0x76, 0x5d, 0xe4, 0xc5, 0x99, 0x54,
	0xc2, 0x87, 0x00, 0xb3, 0x5b, 0x8f, 0xc8, 0x0b, 0x13, 0xca, 0x6d, 0xf3, 0xe2, 0x58, 0xf0, 0x4a,
	0x38, 0x80, 0xe6, 0x62, 0x38, 0xd0, 0xe1, 0x17, 0x5c, 0x3e, 0x77, 0x8b, 0x5f, 0x98, 0xa4, 0x12,
	0x72, 0x58, 0x9f, 0x8b, 0x12, 0xb6, 0x79, 0x31, 0x58, 0x6e, 0x7e, 0x4b, 0xbc, 0xd2, 0x5d, 0x96,
	0xe9, 0xe7, 0x8e, 0x16, 0xdb, 0xbc, 0x78, 0xd0, 0xf3, 0xfa, 0xc7, 0x0f, 0xbe, 0x9f, 0x75, 0xd8,
	0xcf, 0xb3, 0x0e, 0xfb, 0x75, 0xd6, 0x61, 0x9f, 0x7e, 0x77, 0x4a, 0x6f, 0x6f, 0x1c, 0x09, 0xfd,
	0x6e, 0xb4, 0xcf, 0x0f, 0x92, 0xb8, 0xff, 0xf1, 0x44, 0x84, 0x51, 0x6c, 0xbf, 0x5c, 0x7d, 0xf3,
	0xd9, 0xb2, 0xcf, 0xfb, 0x55, 0xb3, 0xb8, 0xf7, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x59, 0x2a,
	0x2c, 0xf1, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WalleClient is the client API for Walle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalleClient interface {
	NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*NewWriterResponse, error)
	WriterInfo(ctx context.Context, in *WriterInfoRequest, opts ...grpc.CallOption) (*WriterInfoResponse, error)
	PutEntryInternal(ctx context.Context, in *PutEntryInternalRequest, opts ...grpc.CallOption) (*PutEntryInternalResponse, error)
	// Returns last committed entry and all following uncommitted entries from the server.
	// There are never any gaps in uncommitted entries.
	TailEntries(ctx context.Context, in *TailEntriesRequest, opts ...grpc.CallOption) (Walle_TailEntriesClient, error)
	// NOTE: ReadEntries only returns committed entries. If it hits a GAP or end of the stream,
	// it will return NOT_FOUND error. Returns entries in range: [start_id...end_id). Can also
	// return early if streamed data is too large. Caller can make another call to fetch
	// rest of the entries.
	ReadEntries(ctx context.Context, in *ReadEntriesRequest, opts ...grpc.CallOption) (Walle_ReadEntriesClient, error)
}

type walleClient struct {
	cc *grpc.ClientConn
}

func NewWalleClient(cc *grpc.ClientConn) WalleClient {
	return &walleClient{cc}
}

func (c *walleClient) NewWriter(ctx context.Context, in *NewWriterRequest, opts ...grpc.CallOption) (*NewWriterResponse, error) {
	out := new(NewWriterResponse)
	err := c.cc.Invoke(ctx, "/Walle/NewWriter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleClient) WriterInfo(ctx context.Context, in *WriterInfoRequest, opts ...grpc.CallOption) (*WriterInfoResponse, error) {
	out := new(WriterInfoResponse)
	err := c.cc.Invoke(ctx, "/Walle/WriterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleClient) PutEntryInternal(ctx context.Context, in *PutEntryInternalRequest, opts ...grpc.CallOption) (*PutEntryInternalResponse, error) {
	out := new(PutEntryInternalResponse)
	err := c.cc.Invoke(ctx, "/Walle/PutEntryInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walleClient) TailEntries(ctx context.Context, in *TailEntriesRequest, opts ...grpc.CallOption) (Walle_TailEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Walle_serviceDesc.Streams[0], "/Walle/TailEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &walleTailEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Walle_TailEntriesClient interface {
	Recv() (*walleapi.Entry, error)
	grpc.ClientStream
}

type walleTailEntriesClient struct {
	grpc.ClientStream
}

func (x *walleTailEntriesClient) Recv() (*walleapi.Entry, error) {
	m := new(walleapi.Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walleClient) ReadEntries(ctx context.Context, in *ReadEntriesRequest, opts ...grpc.CallOption) (Walle_ReadEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Walle_serviceDesc.Streams[1], "/Walle/ReadEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &walleReadEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Walle_ReadEntriesClient interface {
	Recv() (*walleapi.Entry, error)
	grpc.ClientStream
}

type walleReadEntriesClient struct {
	grpc.ClientStream
}

func (x *walleReadEntriesClient) Recv() (*walleapi.Entry, error) {
	m := new(walleapi.Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WalleServer is the server API for Walle service.
type WalleServer interface {
	NewWriter(context.Context, *NewWriterRequest) (*NewWriterResponse, error)
	WriterInfo(context.Context, *WriterInfoRequest) (*WriterInfoResponse, error)
	PutEntryInternal(context.Context, *PutEntryInternalRequest) (*PutEntryInternalResponse, error)
	// Returns last committed entry and all following uncommitted entries from the server.
	// There are never any gaps in uncommitted entries.
	TailEntries(*TailEntriesRequest, Walle_TailEntriesServer) error
	// NOTE: ReadEntries only returns committed entries. If it hits a GAP or end of the stream,
	// it will return NOT_FOUND error. Returns entries in range: [start_id...end_id). Can also
	// return early if streamed data is too large. Caller can make another call to fetch
	// rest of the entries.
	ReadEntries(*ReadEntriesRequest, Walle_ReadEntriesServer) error
}

func RegisterWalleServer(s *grpc.Server, srv WalleServer) {
	s.RegisterService(&_Walle_serviceDesc, srv)
}

func _Walle_NewWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleServer).NewWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Walle/NewWriter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleServer).NewWriter(ctx, req.(*NewWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Walle_WriterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleServer).WriterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Walle/WriterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleServer).WriterInfo(ctx, req.(*WriterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Walle_PutEntryInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEntryInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalleServer).PutEntryInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Walle/PutEntryInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalleServer).PutEntryInternal(ctx, req.(*PutEntryInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Walle_TailEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalleServer).TailEntries(m, &walleTailEntriesServer{stream})
}

type Walle_TailEntriesServer interface {
	Send(*walleapi.Entry) error
	grpc.ServerStream
}

type walleTailEntriesServer struct {
	grpc.ServerStream
}

func (x *walleTailEntriesServer) Send(m *walleapi.Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _Walle_ReadEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalleServer).ReadEntries(m, &walleReadEntriesServer{stream})
}

type Walle_ReadEntriesServer interface {
	Send(*walleapi.Entry) error
	grpc.ServerStream
}

type walleReadEntriesServer struct {
	grpc.ServerStream
}

func (x *walleReadEntriesServer) Send(m *walleapi.Entry) error {
	return x.ServerStream.SendMsg(m)
}

var _Walle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Walle",
	HandlerType: (*WalleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWriter",
			Handler:    _Walle_NewWriter_Handler,
		},
		{
			MethodName: "WriterInfo",
			Handler:    _Walle_WriterInfo_Handler,
		},
		{
			MethodName: "PutEntryInternal",
			Handler:    _Walle_PutEntryInternal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailEntries",
			Handler:       _Walle_TailEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadEntries",
			Handler:       _Walle_ReadEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "walle/walle.proto",
}

func (m *NewWriterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWriterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.FromServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.FromServerId)))
		i += copy(dAtA[i:], m.FromServerId)
	}
	if len(m.WriterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.WriterId)))
		i += copy(dAtA[i:], m.WriterId)
	}
	if len(m.WriterAddr) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.WriterAddr)))
		i += copy(dAtA[i:], m.WriterAddr)
	}
	if m.LeaseMs != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.LeaseMs))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewWriterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWriterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WriterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.FromServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.FromServerId)))
		i += copy(dAtA[i:], m.FromServerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WriterInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriterInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WriterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.WriterId)))
		i += copy(dAtA[i:], m.WriterId)
	}
	if len(m.WriterAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.WriterAddr)))
		i += copy(dAtA[i:], m.WriterAddr)
	}
	if m.LeaseMs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.LeaseMs))
	}
	if m.RemainingLeaseMs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.RemainingLeaseMs))
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutEntryInternalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutEntryInternalRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.FromServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.FromServerId)))
		i += copy(dAtA[i:], m.FromServerId)
	}
	if m.Entry != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.Entry.Size()))
		n1, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CommittedEntryId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.CommittedEntryId))
	}
	if m.CommittedEntryXX != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.CommittedEntryXX))
	}
	if m.IgnoreLeaseRenew {
		dAtA[i] = 0x40
		i++
		if m.IgnoreLeaseRenew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PutEntryInternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutEntryInternalResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TailEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TailEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.FromServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.FromServerId)))
		i += copy(dAtA[i:], m.FromServerId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.ServerId)))
		i += copy(dAtA[i:], m.ServerId)
	}
	if len(m.StreamUri) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.StreamUri)))
		i += copy(dAtA[i:], m.StreamUri)
	}
	if m.StreamVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StreamVersion))
	}
	if len(m.FromServerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWalle(dAtA, i, uint64(len(m.FromServerId)))
		i += copy(dAtA[i:], m.FromServerId)
	}
	if m.StartEntryId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.StartEntryId))
	}
	if m.EndEntryId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWalle(dAtA, i, uint64(m.EndEntryId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWalle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewWriterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	l = len(m.FromServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.WriterId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.WriterAddr)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.LeaseMs != 0 {
		n += 1 + sovWalle(uint64(m.LeaseMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewWriterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	l = len(m.FromServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WriterInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WriterId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.WriterAddr)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.LeaseMs != 0 {
		n += 1 + sovWalle(uint64(m.LeaseMs))
	}
	if m.RemainingLeaseMs != 0 {
		n += 1 + sovWalle(uint64(m.RemainingLeaseMs))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutEntryInternalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	l = len(m.FromServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.CommittedEntryId != 0 {
		n += 1 + sovWalle(uint64(m.CommittedEntryId))
	}
	if m.CommittedEntryXX != 0 {
		n += 1 + sovWalle(uint64(m.CommittedEntryXX))
	}
	if m.IgnoreLeaseRenew {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutEntryInternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TailEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	l = len(m.FromServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	l = len(m.StreamUri)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StreamVersion != 0 {
		n += 1 + sovWalle(uint64(m.StreamVersion))
	}
	l = len(m.FromServerId)
	if l > 0 {
		n += 1 + l + sovWalle(uint64(l))
	}
	if m.StartEntryId != 0 {
		n += 1 + sovWalle(uint64(m.StartEntryId))
	}
	if m.EndEntryId != 0 {
		n += 1 + sovWalle(uint64(m.EndEntryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWalle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWalle(x uint64) (n int) {
	return sovWalle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewWriterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWriterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWriterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterId = append(m.WriterId[:0], dAtA[iNdEx:postIndex]...)
			if m.WriterId == nil {
				m.WriterId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMs", wireType)
			}
			m.LeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWriterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWriterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWriterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriterInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriterInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriterInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterId = append(m.WriterId[:0], dAtA[iNdEx:postIndex]...)
			if m.WriterId == nil {
				m.WriterId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriterAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriterAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMs", wireType)
			}
			m.LeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingLeaseMs", wireType)
			}
			m.RemainingLeaseMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingLeaseMs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutEntryInternalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutEntryInternalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutEntryInternalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &walleapi.Entry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryId", wireType)
			}
			m.CommittedEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedEntryXX", wireType)
			}
			m.CommittedEntryXX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommittedEntryXX |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreLeaseRenew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreLeaseRenew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutEntryInternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutEntryInternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutEntryInternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TailEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TailEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TailEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamVersion", wireType)
			}
			m.StreamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWalle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWalle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartEntryId", wireType)
			}
			m.StartEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndEntryId", wireType)
			}
			m.EndEntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndEntryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWalle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWalle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWalle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWalle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWalle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWalle
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWalle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWalle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWalle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWalle
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWalle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWalle   = fmt.Errorf("proto: integer overflow")
)

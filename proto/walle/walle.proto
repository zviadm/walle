syntax = "proto3";
option go_package = "github.com/zviadm/walle/proto/walle";

import "walleapi/walleapi.proto";

service Walle {
	rpc NewWriter(NewWriterRequest) returns (NewWriterResponse) {}
	rpc WriterInfo(WriterInfoRequest) returns (WriterInfoResponse) {}
	rpc PutEntryInternal(PutEntryInternalRequest) returns (PutEntryInternalResponse) {}

	// Returns last committed entry and all following uncommitted entries from the server.
	// There are never any gaps in uncommitted entries.
	rpc TailEntries(TailEntriesRequest) returns (stream Entry) {}

	// NOTE: ReadEntries only returns committed entries. If it hits a GAP or end of the stream,
	// it will return NOT_FOUND error.
	rpc ReadEntries(ReadEntriesRequest) returns (stream Entry) {}
}

message NewWriterRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	bytes writer_id = 5;
	string writer_addr = 6;
	int64 lease_ms = 7;
}
message NewWriterResponse {}

message WriterInfoRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;
}
message WriterInfoResponse {
	bytes writer_id = 1;
	string writer_addr = 2;
	int64 lease_ms = 3;
	int64 remaining_lease_ms = 4;
	int64 stream_version = 5;
}

message PutEntryInternalRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	Entry entry = 5;
	int64 committed_entry_id = 6;
	bytes committed_entry_md5 = 7;
	bool ignore_lease_renew = 8;
}
message PutEntryInternalResponse{}

message TailEntriesRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;
}

message ReadEntriesRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	int64 start_entry_id = 5;
	int64 end_entry_id = 6;
}

syntax = "proto3";
option go_package = "github.com/zviadm/walle/proto/walle";

import "gogo.proto";
import "walleapi/walleapi.proto";

// Walle service contains WALLE internal RPCs. These are RPCs that WALLE
// servers make between each other.
service Walle {
	rpc NewWriter(NewWriterRequest) returns (Empty) {}
	rpc WriterInfo(WriterInfoRequest) returns (WriterInfoResponse) {}
	rpc PutEntryInternal(PutEntryInternalRequest) returns (Empty) {}

	// Returns last committed entry and all following uncommitted entries from the server.
	// There are never any gaps in uncommitted entries.
	rpc TailEntries(TailEntriesRequest) returns (stream Entry) {}

	// ReadEntries only returns committed entries. If it hits a GAP or end of the stream,
	// it will return NOT_FOUND error. Returns entries in range: [start_id...end_id).
	rpc ReadEntries(ReadEntriesRequest) returns (stream Entry) {}
}

message NewWriterRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	WriterId writer_id = 5 [(gogoproto.nullable) = false];
	string writer_addr = 6;
	int64 lease_ms = 7;
}

message WriterInfoRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;
}
message WriterInfoResponse {
	WriterId writer_id = 1 [(gogoproto.nullable) = false];
	string writer_addr = 2;
	int64 lease_ms = 3;
	int64 remaining_lease_ms = 4;
	int64 stream_version = 5;
}

message PutEntryInternalRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	bool ignore_lease_renew = 5;
	int64 committed_entry_id = 6;
	uint64 committed_entry_x_x = 7;
	Entry entry = 8;
}

message TailEntriesRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;
	// n is number of tail entries to return. 0 means return all.
	int64 n = 5;
}

message ReadEntriesRequest {
	string server_id = 1;
	string stream_uri = 2;
	int64 stream_version = 3;
	string from_server_id = 4;

	int64 start_entry_id = 5;
	int64 end_entry_id = 6;
}
